// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// TflAPIPresentationEntitiesStopPointRouteSection tfl Api presentation entities stop point route section
// swagger:model Tfl.Api.Presentation.Entities.StopPointRouteSection
type TflAPIPresentationEntitiesStopPointRouteSection struct {

	// destination name
	DestinationName string `json:"destinationName,omitempty"`

	// direction
	Direction string `json:"direction,omitempty"`

	// is active
	IsActive bool `json:"isActive,omitempty"`

	// line Id
	LineID string `json:"lineId,omitempty"`

	// line string
	LineString string `json:"lineString,omitempty"`

	// mode
	Mode string `json:"mode,omitempty"`

	// naptan Id
	NaptanID string `json:"naptanId,omitempty"`

	// route section name
	RouteSectionName string `json:"routeSectionName,omitempty"`

	// service type
	ServiceType string `json:"serviceType,omitempty"`

	// valid from
	// Format: date-time
	ValidFrom strfmt.DateTime `json:"validFrom,omitempty"`

	// valid to
	// Format: date-time
	ValidTo strfmt.DateTime `json:"validTo,omitempty"`

	// vehicle destination text
	VehicleDestinationText string `json:"vehicleDestinationText,omitempty"`
}

// Validate validates this tfl Api presentation entities stop point route section
func (m *TflAPIPresentationEntitiesStopPointRouteSection) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateValidFrom(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateValidTo(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TflAPIPresentationEntitiesStopPointRouteSection) validateValidFrom(formats strfmt.Registry) error {

	if swag.IsZero(m.ValidFrom) { // not required
		return nil
	}

	if err := validate.FormatOf("validFrom", "body", "date-time", m.ValidFrom.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *TflAPIPresentationEntitiesStopPointRouteSection) validateValidTo(formats strfmt.Registry) error {

	if swag.IsZero(m.ValidTo) { // not required
		return nil
	}

	if err := validate.FormatOf("validTo", "body", "date-time", m.ValidTo.String(), formats); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *TflAPIPresentationEntitiesStopPointRouteSection) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TflAPIPresentationEntitiesStopPointRouteSection) UnmarshalBinary(b []byte) error {
	var res TflAPIPresentationEntitiesStopPointRouteSection
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

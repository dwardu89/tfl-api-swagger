// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// TflAPIPresentationEntitiesTimetableResponse tfl Api presentation entities timetable response
// swagger:model Tfl.Api.Presentation.Entities.TimetableResponse
type TflAPIPresentationEntitiesTimetableResponse struct {

	// direction
	Direction string `json:"direction,omitempty"`

	// disambiguation
	Disambiguation *TflAPIPresentationEntitiesTimetablesDisambiguation `json:"disambiguation,omitempty"`

	// line Id
	LineID string `json:"lineId,omitempty"`

	// line name
	LineName string `json:"lineName,omitempty"`

	// pdf Url
	PdfURL string `json:"pdfUrl,omitempty"`

	// stations
	Stations []*TflAPIPresentationEntitiesMatchedStop `json:"stations"`

	// status error message
	StatusErrorMessage string `json:"statusErrorMessage,omitempty"`

	// stops
	Stops []*TflAPIPresentationEntitiesMatchedStop `json:"stops"`

	// timetable
	Timetable *TflAPIPresentationEntitiesTimetable `json:"timetable,omitempty"`
}

// Validate validates this tfl Api presentation entities timetable response
func (m *TflAPIPresentationEntitiesTimetableResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDisambiguation(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStations(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStops(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTimetable(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TflAPIPresentationEntitiesTimetableResponse) validateDisambiguation(formats strfmt.Registry) error {

	if swag.IsZero(m.Disambiguation) { // not required
		return nil
	}

	if m.Disambiguation != nil {
		if err := m.Disambiguation.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("disambiguation")
			}
			return err
		}
	}

	return nil
}

func (m *TflAPIPresentationEntitiesTimetableResponse) validateStations(formats strfmt.Registry) error {

	if swag.IsZero(m.Stations) { // not required
		return nil
	}

	for i := 0; i < len(m.Stations); i++ {
		if swag.IsZero(m.Stations[i]) { // not required
			continue
		}

		if m.Stations[i] != nil {
			if err := m.Stations[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("stations" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *TflAPIPresentationEntitiesTimetableResponse) validateStops(formats strfmt.Registry) error {

	if swag.IsZero(m.Stops) { // not required
		return nil
	}

	for i := 0; i < len(m.Stops); i++ {
		if swag.IsZero(m.Stops[i]) { // not required
			continue
		}

		if m.Stops[i] != nil {
			if err := m.Stops[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("stops" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *TflAPIPresentationEntitiesTimetableResponse) validateTimetable(formats strfmt.Registry) error {

	if swag.IsZero(m.Timetable) { // not required
		return nil
	}

	if m.Timetable != nil {
		if err := m.Timetable.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("timetable")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *TflAPIPresentationEntitiesTimetableResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TflAPIPresentationEntitiesTimetableResponse) UnmarshalBinary(b []byte) error {
	var res TflAPIPresentationEntitiesTimetableResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

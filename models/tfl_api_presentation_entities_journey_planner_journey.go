// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// TflAPIPresentationEntitiesJourneyPlannerJourney Object that represents an end to end journey (see schematic).
// swagger:model Tfl.Api.Presentation.Entities.JourneyPlanner.Journey
type TflAPIPresentationEntitiesJourneyPlannerJourney struct {

	// arrival date time
	// Format: date-time
	ArrivalDateTime strfmt.DateTime `json:"arrivalDateTime,omitempty"`

	// duration
	Duration int32 `json:"duration,omitempty"`

	// fare
	Fare *TflAPIPresentationEntitiesJourneyPlannerJourneyFare `json:"fare,omitempty"`

	// legs
	Legs []*TflAPIPresentationEntitiesJourneyPlannerLeg `json:"legs"`

	// start date time
	// Format: date-time
	StartDateTime strfmt.DateTime `json:"startDateTime,omitempty"`
}

// Validate validates this tfl Api presentation entities journey planner journey
func (m *TflAPIPresentationEntitiesJourneyPlannerJourney) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateArrivalDateTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFare(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLegs(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStartDateTime(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TflAPIPresentationEntitiesJourneyPlannerJourney) validateArrivalDateTime(formats strfmt.Registry) error {

	if swag.IsZero(m.ArrivalDateTime) { // not required
		return nil
	}

	if err := validate.FormatOf("arrivalDateTime", "body", "date-time", m.ArrivalDateTime.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *TflAPIPresentationEntitiesJourneyPlannerJourney) validateFare(formats strfmt.Registry) error {

	if swag.IsZero(m.Fare) { // not required
		return nil
	}

	if m.Fare != nil {
		if err := m.Fare.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("fare")
			}
			return err
		}
	}

	return nil
}

func (m *TflAPIPresentationEntitiesJourneyPlannerJourney) validateLegs(formats strfmt.Registry) error {

	if swag.IsZero(m.Legs) { // not required
		return nil
	}

	for i := 0; i < len(m.Legs); i++ {
		if swag.IsZero(m.Legs[i]) { // not required
			continue
		}

		if m.Legs[i] != nil {
			if err := m.Legs[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("legs" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *TflAPIPresentationEntitiesJourneyPlannerJourney) validateStartDateTime(formats strfmt.Registry) error {

	if swag.IsZero(m.StartDateTime) { // not required
		return nil
	}

	if err := validate.FormatOf("startDateTime", "body", "date-time", m.StartDateTime.String(), formats); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *TflAPIPresentationEntitiesJourneyPlannerJourney) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TflAPIPresentationEntitiesJourneyPlannerJourney) UnmarshalBinary(b []byte) error {
	var res TflAPIPresentationEntitiesJourneyPlannerJourney
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

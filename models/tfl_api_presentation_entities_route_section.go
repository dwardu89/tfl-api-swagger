// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// TflAPIPresentationEntitiesRouteSection tfl Api presentation entities route section
// swagger:model Tfl.Api.Presentation.Entities.RouteSection
type TflAPIPresentationEntitiesRouteSection struct {

	// The name of the Destination StopPoint
	DestinationName string `json:"destinationName,omitempty"`

	// Inbound or Outbound
	Direction string `json:"direction,omitempty"`

	// The Id of the route
	ID string `json:"id,omitempty"`

	// The Id of the Line
	LineID string `json:"lineId,omitempty"`

	// The co-ordinates of the route's path as a geoJSON lineString
	LineString string `json:"lineString,omitempty"`

	// Name such as "72"
	Name string `json:"name,omitempty"`

	// The name of the Origin StopPoint
	OriginationName string `json:"originationName,omitempty"`

	// The route code
	RouteCode string `json:"routeCode,omitempty"`

	// route section naptan entry sequence
	RouteSectionNaptanEntrySequence []*TflAPIPresentationEntitiesRouteSectionNaptanEntrySequence `json:"routeSectionNaptanEntrySequence"`

	// The DateTime that the Service containing this Route is valid from.
	// Format: date-time
	ValidFrom strfmt.DateTime `json:"validFrom,omitempty"`

	// The DateTime that the Service containing this Route is valid until.
	// Format: date-time
	ValidTo strfmt.DateTime `json:"validTo,omitempty"`
}

// Validate validates this tfl Api presentation entities route section
func (m *TflAPIPresentationEntitiesRouteSection) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateRouteSectionNaptanEntrySequence(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateValidFrom(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateValidTo(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TflAPIPresentationEntitiesRouteSection) validateRouteSectionNaptanEntrySequence(formats strfmt.Registry) error {

	if swag.IsZero(m.RouteSectionNaptanEntrySequence) { // not required
		return nil
	}

	for i := 0; i < len(m.RouteSectionNaptanEntrySequence); i++ {
		if swag.IsZero(m.RouteSectionNaptanEntrySequence[i]) { // not required
			continue
		}

		if m.RouteSectionNaptanEntrySequence[i] != nil {
			if err := m.RouteSectionNaptanEntrySequence[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("routeSectionNaptanEntrySequence" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *TflAPIPresentationEntitiesRouteSection) validateValidFrom(formats strfmt.Registry) error {

	if swag.IsZero(m.ValidFrom) { // not required
		return nil
	}

	if err := validate.FormatOf("validFrom", "body", "date-time", m.ValidFrom.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *TflAPIPresentationEntitiesRouteSection) validateValidTo(formats strfmt.Registry) error {

	if swag.IsZero(m.ValidTo) { // not required
		return nil
	}

	if err := validate.FormatOf("validTo", "body", "date-time", m.ValidTo.String(), formats); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *TflAPIPresentationEntitiesRouteSection) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TflAPIPresentationEntitiesRouteSection) UnmarshalBinary(b []byte) error {
	var res TflAPIPresentationEntitiesRouteSection
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

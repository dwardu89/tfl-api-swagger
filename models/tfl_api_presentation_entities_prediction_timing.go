// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// TflAPIPresentationEntitiesPredictionTiming tfl Api presentation entities prediction timing
// swagger:model Tfl.Api.Presentation.Entities.PredictionTiming
type TflAPIPresentationEntitiesPredictionTiming struct {

	// countdown server adjustment
	CountdownServerAdjustment string `json:"countdownServerAdjustment,omitempty"`

	// insert
	// Format: date-time
	Insert strfmt.DateTime `json:"insert,omitempty"`

	// read
	// Format: date-time
	Read strfmt.DateTime `json:"read,omitempty"`

	// received
	// Format: date-time
	Received strfmt.DateTime `json:"received,omitempty"`

	// sent
	// Format: date-time
	Sent strfmt.DateTime `json:"sent,omitempty"`

	// source
	// Format: date-time
	Source strfmt.DateTime `json:"source,omitempty"`
}

// Validate validates this tfl Api presentation entities prediction timing
func (m *TflAPIPresentationEntitiesPredictionTiming) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateInsert(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRead(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateReceived(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSent(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSource(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TflAPIPresentationEntitiesPredictionTiming) validateInsert(formats strfmt.Registry) error {

	if swag.IsZero(m.Insert) { // not required
		return nil
	}

	if err := validate.FormatOf("insert", "body", "date-time", m.Insert.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *TflAPIPresentationEntitiesPredictionTiming) validateRead(formats strfmt.Registry) error {

	if swag.IsZero(m.Read) { // not required
		return nil
	}

	if err := validate.FormatOf("read", "body", "date-time", m.Read.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *TflAPIPresentationEntitiesPredictionTiming) validateReceived(formats strfmt.Registry) error {

	if swag.IsZero(m.Received) { // not required
		return nil
	}

	if err := validate.FormatOf("received", "body", "date-time", m.Received.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *TflAPIPresentationEntitiesPredictionTiming) validateSent(formats strfmt.Registry) error {

	if swag.IsZero(m.Sent) { // not required
		return nil
	}

	if err := validate.FormatOf("sent", "body", "date-time", m.Sent.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *TflAPIPresentationEntitiesPredictionTiming) validateSource(formats strfmt.Registry) error {

	if swag.IsZero(m.Source) { // not required
		return nil
	}

	if err := validate.FormatOf("source", "body", "date-time", m.Source.String(), formats); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *TflAPIPresentationEntitiesPredictionTiming) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TflAPIPresentationEntitiesPredictionTiming) UnmarshalBinary(b []byte) error {
	var res TflAPIPresentationEntitiesPredictionTiming
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// TflAPIPresentationEntitiesVehicleMatch tfl Api presentation entities vehicle match
// swagger:model Tfl.Api.Presentation.Entities.VehicleMatch
type TflAPIPresentationEntitiesVehicleMatch struct {

	// colour
	Colour string `json:"colour,omitempty"`

	// compliance
	// Enum: [NotAvailable NotCompliant Compliant Exempt]
	Compliance string `json:"compliance,omitempty"`

	// make
	Make string `json:"make,omitempty"`

	// model
	Model string `json:"model,omitempty"`

	// type
	Type string `json:"type,omitempty"`

	// vrm
	Vrm string `json:"vrm,omitempty"`
}

// Validate validates this tfl Api presentation entities vehicle match
func (m *TflAPIPresentationEntitiesVehicleMatch) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCompliance(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var tflApiPresentationEntitiesVehicleMatchTypeCompliancePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["NotAvailable","NotCompliant","Compliant","Exempt"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		tflApiPresentationEntitiesVehicleMatchTypeCompliancePropEnum = append(tflApiPresentationEntitiesVehicleMatchTypeCompliancePropEnum, v)
	}
}

const (

	// TflAPIPresentationEntitiesVehicleMatchComplianceNotAvailable captures enum value "NotAvailable"
	TflAPIPresentationEntitiesVehicleMatchComplianceNotAvailable string = "NotAvailable"

	// TflAPIPresentationEntitiesVehicleMatchComplianceNotCompliant captures enum value "NotCompliant"
	TflAPIPresentationEntitiesVehicleMatchComplianceNotCompliant string = "NotCompliant"

	// TflAPIPresentationEntitiesVehicleMatchComplianceCompliant captures enum value "Compliant"
	TflAPIPresentationEntitiesVehicleMatchComplianceCompliant string = "Compliant"

	// TflAPIPresentationEntitiesVehicleMatchComplianceExempt captures enum value "Exempt"
	TflAPIPresentationEntitiesVehicleMatchComplianceExempt string = "Exempt"
)

// prop value enum
func (m *TflAPIPresentationEntitiesVehicleMatch) validateComplianceEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, tflApiPresentationEntitiesVehicleMatchTypeCompliancePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *TflAPIPresentationEntitiesVehicleMatch) validateCompliance(formats strfmt.Registry) error {

	if swag.IsZero(m.Compliance) { // not required
		return nil
	}

	// value enum
	if err := m.validateComplianceEnum("compliance", "body", m.Compliance); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *TflAPIPresentationEntitiesVehicleMatch) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TflAPIPresentationEntitiesVehicleMatch) UnmarshalBinary(b []byte) error {
	var res TflAPIPresentationEntitiesVehicleMatch
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

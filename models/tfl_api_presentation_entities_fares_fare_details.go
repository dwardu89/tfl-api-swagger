// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// TflAPIPresentationEntitiesFaresFareDetails tfl Api presentation entities fares fare details
// swagger:model Tfl.Api.Presentation.Entities.Fares.FareDetails
type TflAPIPresentationEntitiesFaresFareDetails struct {

	// bounds Id
	BoundsID int32 `json:"boundsId,omitempty"`

	// contactless p a y g only fare
	ContactlessPAYGOnlyFare bool `json:"contactlessPAYGOnlyFare,omitempty"`

	// display name
	DisplayName string `json:"displayName,omitempty"`

	// display order
	DisplayOrder int32 `json:"displayOrder,omitempty"`

	// end date
	// Format: date-time
	EndDate strfmt.DateTime `json:"endDate,omitempty"`

	// from
	From string `json:"from,omitempty"`

	// from station
	FromStation string `json:"fromStation,omitempty"`

	// is tour
	IsTour bool `json:"isTour,omitempty"`

	// messages
	Messages []*TflAPIPresentationEntitiesMessage `json:"messages"`

	// mode
	Mode string `json:"mode,omitempty"`

	// operator
	Operator string `json:"operator,omitempty"`

	// passenger type
	PassengerType string `json:"passengerType,omitempty"`

	// route code
	RouteCode string `json:"routeCode,omitempty"`

	// route description
	RouteDescription string `json:"routeDescription,omitempty"`

	// special fare
	SpecialFare bool `json:"specialFare,omitempty"`

	// start date
	// Format: date-time
	StartDate strfmt.DateTime `json:"startDate,omitempty"`

	// through fare
	ThroughFare bool `json:"throughFare,omitempty"`

	// tickets available
	TicketsAvailable []*TflAPIPresentationEntitiesFaresTicket `json:"ticketsAvailable"`

	// to
	To string `json:"to,omitempty"`

	// to station
	ToStation string `json:"toStation,omitempty"`

	// validator information
	ValidatorInformation string `json:"validatorInformation,omitempty"`

	// via
	Via string `json:"via,omitempty"`
}

// Validate validates this tfl Api presentation entities fares fare details
func (m *TflAPIPresentationEntitiesFaresFareDetails) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEndDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMessages(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStartDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTicketsAvailable(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TflAPIPresentationEntitiesFaresFareDetails) validateEndDate(formats strfmt.Registry) error {

	if swag.IsZero(m.EndDate) { // not required
		return nil
	}

	if err := validate.FormatOf("endDate", "body", "date-time", m.EndDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *TflAPIPresentationEntitiesFaresFareDetails) validateMessages(formats strfmt.Registry) error {

	if swag.IsZero(m.Messages) { // not required
		return nil
	}

	for i := 0; i < len(m.Messages); i++ {
		if swag.IsZero(m.Messages[i]) { // not required
			continue
		}

		if m.Messages[i] != nil {
			if err := m.Messages[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("messages" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *TflAPIPresentationEntitiesFaresFareDetails) validateStartDate(formats strfmt.Registry) error {

	if swag.IsZero(m.StartDate) { // not required
		return nil
	}

	if err := validate.FormatOf("startDate", "body", "date-time", m.StartDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *TflAPIPresentationEntitiesFaresFareDetails) validateTicketsAvailable(formats strfmt.Registry) error {

	if swag.IsZero(m.TicketsAvailable) { // not required
		return nil
	}

	for i := 0; i < len(m.TicketsAvailable); i++ {
		if swag.IsZero(m.TicketsAvailable[i]) { // not required
			continue
		}

		if m.TicketsAvailable[i] != nil {
			if err := m.TicketsAvailable[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("ticketsAvailable" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *TflAPIPresentationEntitiesFaresFareDetails) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TflAPIPresentationEntitiesFaresFareDetails) UnmarshalBinary(b []byte) error {
	var res TflAPIPresentationEntitiesFaresFareDetails
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

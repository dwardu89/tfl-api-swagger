// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// TflAPIPresentationEntitiesStopPoint tfl Api presentation entities stop point
// swagger:model Tfl.Api.Presentation.Entities.StopPoint
type TflAPIPresentationEntitiesStopPoint struct {

	// accessibility summary
	AccessibilitySummary string `json:"accessibilitySummary,omitempty"`

	// A bag of additional key/value pairs with extra information about this place.
	AdditionalProperties []*TflAPIPresentationEntitiesAdditionalProperties `json:"additionalProperties"`

	// children
	Children []*TflAPIPresentationEntitiesPlace `json:"children"`

	// children urls
	ChildrenUrls []string `json:"childrenUrls"`

	// A human readable name.
	CommonName string `json:"commonName,omitempty"`

	// The distance of the place from its search point, if this is the result
	//             of a geographical search, otherwise zero.
	Distance float64 `json:"distance,omitempty"`

	// full name
	FullName string `json:"fullName,omitempty"`

	// hub naptan code
	HubNaptanCode string `json:"hubNaptanCode,omitempty"`

	// ics code
	IcsCode string `json:"icsCode,omitempty"`

	// A unique identifier.
	ID string `json:"id,omitempty"`

	// The indicator of the stop point e.g. "Stop K"
	Indicator string `json:"indicator,omitempty"`

	// WGS84 latitude of the location.
	Lat float64 `json:"lat,omitempty"`

	// line group
	LineGroup []*TflAPIPresentationEntitiesLineGroup `json:"lineGroup"`

	// line mode groups
	LineModeGroups []*TflAPIPresentationEntitiesLineModeGroup `json:"lineModeGroups"`

	// lines
	Lines []*TflAPIPresentationEntitiesIdentifier `json:"lines"`

	// WGS84 longitude of the location.
	Lon float64 `json:"lon,omitempty"`

	// modes
	Modes []string `json:"modes"`

	// naptan Id
	NaptanID string `json:"naptanId,omitempty"`

	// naptan mode
	NaptanMode string `json:"naptanMode,omitempty"`

	// The type of Place. See /Place/Meta/placeTypes for possible values.
	PlaceType string `json:"placeType,omitempty"`

	// platform name
	PlatformName string `json:"platformName,omitempty"`

	// sms code
	SmsCode string `json:"smsCode,omitempty"`

	// station naptan
	StationNaptan string `json:"stationNaptan,omitempty"`

	// status
	Status bool `json:"status,omitempty"`

	// The stop letter, if it could be cleansed from the Indicator e.g. "K"
	StopLetter string `json:"stopLetter,omitempty"`

	// stop type
	StopType string `json:"stopType,omitempty"`

	// The unique location of this resource.
	URL string `json:"url,omitempty"`
}

// Validate validates this tfl Api presentation entities stop point
func (m *TflAPIPresentationEntitiesStopPoint) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAdditionalProperties(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateChildren(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLineGroup(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLineModeGroups(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLines(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TflAPIPresentationEntitiesStopPoint) validateAdditionalProperties(formats strfmt.Registry) error {

	if swag.IsZero(m.AdditionalProperties) { // not required
		return nil
	}

	for i := 0; i < len(m.AdditionalProperties); i++ {
		if swag.IsZero(m.AdditionalProperties[i]) { // not required
			continue
		}

		if m.AdditionalProperties[i] != nil {
			if err := m.AdditionalProperties[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("additionalProperties" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *TflAPIPresentationEntitiesStopPoint) validateChildren(formats strfmt.Registry) error {

	if swag.IsZero(m.Children) { // not required
		return nil
	}

	for i := 0; i < len(m.Children); i++ {
		if swag.IsZero(m.Children[i]) { // not required
			continue
		}

		if m.Children[i] != nil {
			if err := m.Children[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("children" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *TflAPIPresentationEntitiesStopPoint) validateLineGroup(formats strfmt.Registry) error {

	if swag.IsZero(m.LineGroup) { // not required
		return nil
	}

	for i := 0; i < len(m.LineGroup); i++ {
		if swag.IsZero(m.LineGroup[i]) { // not required
			continue
		}

		if m.LineGroup[i] != nil {
			if err := m.LineGroup[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("lineGroup" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *TflAPIPresentationEntitiesStopPoint) validateLineModeGroups(formats strfmt.Registry) error {

	if swag.IsZero(m.LineModeGroups) { // not required
		return nil
	}

	for i := 0; i < len(m.LineModeGroups); i++ {
		if swag.IsZero(m.LineModeGroups[i]) { // not required
			continue
		}

		if m.LineModeGroups[i] != nil {
			if err := m.LineModeGroups[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("lineModeGroups" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *TflAPIPresentationEntitiesStopPoint) validateLines(formats strfmt.Registry) error {

	if swag.IsZero(m.Lines) { // not required
		return nil
	}

	for i := 0; i < len(m.Lines); i++ {
		if swag.IsZero(m.Lines[i]) { // not required
			continue
		}

		if m.Lines[i] != nil {
			if err := m.Lines[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("lines" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *TflAPIPresentationEntitiesStopPoint) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TflAPIPresentationEntitiesStopPoint) UnmarshalBinary(b []byte) error {
	var res TflAPIPresentationEntitiesStopPoint
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// TflAPIPresentationEntitiesCycleSuperhighway tfl Api presentation entities cycle superhighway
// swagger:model Tfl.Api.Presentation.Entities.CycleSuperhighway
type TflAPIPresentationEntitiesCycleSuperhighway struct {

	// A LineString or MultiLineString that forms the route of the highway
	Geography *SystemDataSpatialDbGeography `json:"geography,omitempty"`

	// The Id
	ID string `json:"id,omitempty"`

	// The long label to show on maps when zoomed in
	Label string `json:"label,omitempty"`

	// The short label to show on maps
	LabelShort string `json:"labelShort,omitempty"`

	// When the data was last updated
	// Format: date-time
	Modified strfmt.DateTime `json:"modified,omitempty"`

	// Type of cycle route e.g CycleSuperhighways, Quietways, MiniHollands etc
	// Enum: [Unknown All Cycle Superhighways Quietways Cycleways Mini-Hollands Central London Grid]
	RouteType string `json:"routeType,omitempty"`

	// True if the route is split into segments
	Segmented bool `json:"segmented,omitempty"`

	// Cycle route status i.e Proposed, Existing etc
	// Enum: [Unknown All Open In Progress Planned Planned - Subject to feasibility and consultation. Not Open]
	Status string `json:"status,omitempty"`
}

// Validate validates this tfl Api presentation entities cycle superhighway
func (m *TflAPIPresentationEntitiesCycleSuperhighway) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateGeography(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateModified(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRouteType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TflAPIPresentationEntitiesCycleSuperhighway) validateGeography(formats strfmt.Registry) error {

	if swag.IsZero(m.Geography) { // not required
		return nil
	}

	if m.Geography != nil {
		if err := m.Geography.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("geography")
			}
			return err
		}
	}

	return nil
}

func (m *TflAPIPresentationEntitiesCycleSuperhighway) validateModified(formats strfmt.Registry) error {

	if swag.IsZero(m.Modified) { // not required
		return nil
	}

	if err := validate.FormatOf("modified", "body", "date-time", m.Modified.String(), formats); err != nil {
		return err
	}

	return nil
}

var tflApiPresentationEntitiesCycleSuperhighwayTypeRouteTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Unknown","All","Cycle Superhighways","Quietways","Cycleways","Mini-Hollands","Central London Grid"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		tflApiPresentationEntitiesCycleSuperhighwayTypeRouteTypePropEnum = append(tflApiPresentationEntitiesCycleSuperhighwayTypeRouteTypePropEnum, v)
	}
}

const (

	// TflAPIPresentationEntitiesCycleSuperhighwayRouteTypeUnknown captures enum value "Unknown"
	TflAPIPresentationEntitiesCycleSuperhighwayRouteTypeUnknown string = "Unknown"

	// TflAPIPresentationEntitiesCycleSuperhighwayRouteTypeAll captures enum value "All"
	TflAPIPresentationEntitiesCycleSuperhighwayRouteTypeAll string = "All"

	// TflAPIPresentationEntitiesCycleSuperhighwayRouteTypeCycleSuperhighways captures enum value "Cycle Superhighways"
	TflAPIPresentationEntitiesCycleSuperhighwayRouteTypeCycleSuperhighways string = "Cycle Superhighways"

	// TflAPIPresentationEntitiesCycleSuperhighwayRouteTypeQuietways captures enum value "Quietways"
	TflAPIPresentationEntitiesCycleSuperhighwayRouteTypeQuietways string = "Quietways"

	// TflAPIPresentationEntitiesCycleSuperhighwayRouteTypeCycleways captures enum value "Cycleways"
	TflAPIPresentationEntitiesCycleSuperhighwayRouteTypeCycleways string = "Cycleways"

	// TflAPIPresentationEntitiesCycleSuperhighwayRouteTypeMiniHollands captures enum value "Mini-Hollands"
	TflAPIPresentationEntitiesCycleSuperhighwayRouteTypeMiniHollands string = "Mini-Hollands"

	// TflAPIPresentationEntitiesCycleSuperhighwayRouteTypeCentralLondonGrid captures enum value "Central London Grid"
	TflAPIPresentationEntitiesCycleSuperhighwayRouteTypeCentralLondonGrid string = "Central London Grid"
)

// prop value enum
func (m *TflAPIPresentationEntitiesCycleSuperhighway) validateRouteTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, tflApiPresentationEntitiesCycleSuperhighwayTypeRouteTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *TflAPIPresentationEntitiesCycleSuperhighway) validateRouteType(formats strfmt.Registry) error {

	if swag.IsZero(m.RouteType) { // not required
		return nil
	}

	// value enum
	if err := m.validateRouteTypeEnum("routeType", "body", m.RouteType); err != nil {
		return err
	}

	return nil
}

var tflApiPresentationEntitiesCycleSuperhighwayTypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Unknown","All","Open","In Progress","Planned","Planned - Subject to feasibility and consultation.","Not Open"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		tflApiPresentationEntitiesCycleSuperhighwayTypeStatusPropEnum = append(tflApiPresentationEntitiesCycleSuperhighwayTypeStatusPropEnum, v)
	}
}

const (

	// TflAPIPresentationEntitiesCycleSuperhighwayStatusUnknown captures enum value "Unknown"
	TflAPIPresentationEntitiesCycleSuperhighwayStatusUnknown string = "Unknown"

	// TflAPIPresentationEntitiesCycleSuperhighwayStatusAll captures enum value "All"
	TflAPIPresentationEntitiesCycleSuperhighwayStatusAll string = "All"

	// TflAPIPresentationEntitiesCycleSuperhighwayStatusOpen captures enum value "Open"
	TflAPIPresentationEntitiesCycleSuperhighwayStatusOpen string = "Open"

	// TflAPIPresentationEntitiesCycleSuperhighwayStatusInProgress captures enum value "In Progress"
	TflAPIPresentationEntitiesCycleSuperhighwayStatusInProgress string = "In Progress"

	// TflAPIPresentationEntitiesCycleSuperhighwayStatusPlanned captures enum value "Planned"
	TflAPIPresentationEntitiesCycleSuperhighwayStatusPlanned string = "Planned"

	// TflAPIPresentationEntitiesCycleSuperhighwayStatusPlannedSubjectToFeasibilityAndConsultation captures enum value "Planned - Subject to feasibility and consultation."
	TflAPIPresentationEntitiesCycleSuperhighwayStatusPlannedSubjectToFeasibilityAndConsultation string = "Planned - Subject to feasibility and consultation."

	// TflAPIPresentationEntitiesCycleSuperhighwayStatusNotOpen captures enum value "Not Open"
	TflAPIPresentationEntitiesCycleSuperhighwayStatusNotOpen string = "Not Open"
)

// prop value enum
func (m *TflAPIPresentationEntitiesCycleSuperhighway) validateStatusEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, tflApiPresentationEntitiesCycleSuperhighwayTypeStatusPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *TflAPIPresentationEntitiesCycleSuperhighway) validateStatus(formats strfmt.Registry) error {

	if swag.IsZero(m.Status) { // not required
		return nil
	}

	// value enum
	if err := m.validateStatusEnum("status", "body", m.Status); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *TflAPIPresentationEntitiesCycleSuperhighway) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TflAPIPresentationEntitiesCycleSuperhighway) UnmarshalBinary(b []byte) error {
	var res TflAPIPresentationEntitiesCycleSuperhighway
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

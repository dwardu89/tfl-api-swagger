// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// TflAPIPresentationEntitiesIdentifier tfl Api presentation entities identifier
// swagger:model Tfl.Api.Presentation.Entities.Identifier
type TflAPIPresentationEntitiesIdentifier struct {

	// crowding
	Crowding *TflAPIPresentationEntitiesCrowding `json:"crowding,omitempty"`

	// full name
	FullName string `json:"fullName,omitempty"`

	// id
	ID string `json:"id,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// route type
	// Enum: [Unknown All Cycle Superhighways Quietways Cycleways Mini-Hollands Central London Grid]
	RouteType string `json:"routeType,omitempty"`

	// status
	// Enum: [Unknown All Open In Progress Planned Planned - Subject to feasibility and consultation. Not Open]
	Status string `json:"status,omitempty"`

	// type
	Type string `json:"type,omitempty"`

	// uri
	URI string `json:"uri,omitempty"`
}

// Validate validates this tfl Api presentation entities identifier
func (m *TflAPIPresentationEntitiesIdentifier) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCrowding(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRouteType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TflAPIPresentationEntitiesIdentifier) validateCrowding(formats strfmt.Registry) error {

	if swag.IsZero(m.Crowding) { // not required
		return nil
	}

	if m.Crowding != nil {
		if err := m.Crowding.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("crowding")
			}
			return err
		}
	}

	return nil
}

var tflApiPresentationEntitiesIdentifierTypeRouteTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Unknown","All","Cycle Superhighways","Quietways","Cycleways","Mini-Hollands","Central London Grid"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		tflApiPresentationEntitiesIdentifierTypeRouteTypePropEnum = append(tflApiPresentationEntitiesIdentifierTypeRouteTypePropEnum, v)
	}
}

const (

	// TflAPIPresentationEntitiesIdentifierRouteTypeUnknown captures enum value "Unknown"
	TflAPIPresentationEntitiesIdentifierRouteTypeUnknown string = "Unknown"

	// TflAPIPresentationEntitiesIdentifierRouteTypeAll captures enum value "All"
	TflAPIPresentationEntitiesIdentifierRouteTypeAll string = "All"

	// TflAPIPresentationEntitiesIdentifierRouteTypeCycleSuperhighways captures enum value "Cycle Superhighways"
	TflAPIPresentationEntitiesIdentifierRouteTypeCycleSuperhighways string = "Cycle Superhighways"

	// TflAPIPresentationEntitiesIdentifierRouteTypeQuietways captures enum value "Quietways"
	TflAPIPresentationEntitiesIdentifierRouteTypeQuietways string = "Quietways"

	// TflAPIPresentationEntitiesIdentifierRouteTypeCycleways captures enum value "Cycleways"
	TflAPIPresentationEntitiesIdentifierRouteTypeCycleways string = "Cycleways"

	// TflAPIPresentationEntitiesIdentifierRouteTypeMiniHollands captures enum value "Mini-Hollands"
	TflAPIPresentationEntitiesIdentifierRouteTypeMiniHollands string = "Mini-Hollands"

	// TflAPIPresentationEntitiesIdentifierRouteTypeCentralLondonGrid captures enum value "Central London Grid"
	TflAPIPresentationEntitiesIdentifierRouteTypeCentralLondonGrid string = "Central London Grid"
)

// prop value enum
func (m *TflAPIPresentationEntitiesIdentifier) validateRouteTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, tflApiPresentationEntitiesIdentifierTypeRouteTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *TflAPIPresentationEntitiesIdentifier) validateRouteType(formats strfmt.Registry) error {

	if swag.IsZero(m.RouteType) { // not required
		return nil
	}

	// value enum
	if err := m.validateRouteTypeEnum("routeType", "body", m.RouteType); err != nil {
		return err
	}

	return nil
}

var tflApiPresentationEntitiesIdentifierTypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Unknown","All","Open","In Progress","Planned","Planned - Subject to feasibility and consultation.","Not Open"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		tflApiPresentationEntitiesIdentifierTypeStatusPropEnum = append(tflApiPresentationEntitiesIdentifierTypeStatusPropEnum, v)
	}
}

const (

	// TflAPIPresentationEntitiesIdentifierStatusUnknown captures enum value "Unknown"
	TflAPIPresentationEntitiesIdentifierStatusUnknown string = "Unknown"

	// TflAPIPresentationEntitiesIdentifierStatusAll captures enum value "All"
	TflAPIPresentationEntitiesIdentifierStatusAll string = "All"

	// TflAPIPresentationEntitiesIdentifierStatusOpen captures enum value "Open"
	TflAPIPresentationEntitiesIdentifierStatusOpen string = "Open"

	// TflAPIPresentationEntitiesIdentifierStatusInProgress captures enum value "In Progress"
	TflAPIPresentationEntitiesIdentifierStatusInProgress string = "In Progress"

	// TflAPIPresentationEntitiesIdentifierStatusPlanned captures enum value "Planned"
	TflAPIPresentationEntitiesIdentifierStatusPlanned string = "Planned"

	// TflAPIPresentationEntitiesIdentifierStatusPlannedSubjectToFeasibilityAndConsultation captures enum value "Planned - Subject to feasibility and consultation."
	TflAPIPresentationEntitiesIdentifierStatusPlannedSubjectToFeasibilityAndConsultation string = "Planned - Subject to feasibility and consultation."

	// TflAPIPresentationEntitiesIdentifierStatusNotOpen captures enum value "Not Open"
	TflAPIPresentationEntitiesIdentifierStatusNotOpen string = "Not Open"
)

// prop value enum
func (m *TflAPIPresentationEntitiesIdentifier) validateStatusEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, tflApiPresentationEntitiesIdentifierTypeStatusPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *TflAPIPresentationEntitiesIdentifier) validateStatus(formats strfmt.Registry) error {

	if swag.IsZero(m.Status) { // not required
		return nil
	}

	// value enum
	if err := m.validateStatusEnum("status", "body", m.Status); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *TflAPIPresentationEntitiesIdentifier) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TflAPIPresentationEntitiesIdentifier) UnmarshalBinary(b []byte) error {
	var res TflAPIPresentationEntitiesIdentifier
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

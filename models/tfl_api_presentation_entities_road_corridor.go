// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// TflAPIPresentationEntitiesRoadCorridor tfl Api presentation entities road corridor
// swagger:model Tfl.Api.Presentation.Entities.RoadCorridor
type TflAPIPresentationEntitiesRoadCorridor struct {

	// The Bounds of the Corridor, given by the south-east followed by the north-west co-ordinate
	//             pair in geoJSON format e.g. "[[-1.241531,51.242151],[1.641223,53.765721]]"
	Bounds string `json:"bounds,omitempty"`

	// The display name of the Corridor e.g. "North Circular (A406)". This
	//             may be identical to the Id.
	DisplayName string `json:"displayName,omitempty"`

	// The Envelope of the Corridor, given by the corner co-ordinates of a rectangular (four-point) polygon
	//             in geoJSON format e.g. "[[-1.241531,51.242151],[-1.241531,53.765721],[1.641223,53.765721],[1.641223,51.242151]]"
	Envelope string `json:"envelope,omitempty"`

	// The group name of the Corridor e.g. "Central London". Most corridors are not grouped, in which case this field can be null.
	Group string `json:"group,omitempty"`

	// The Id of the Corridor e.g. "A406"
	ID string `json:"id,omitempty"`

	// The end of the period over which status has been aggregated, or null if this is the current corridor status.
	// Format: date-time
	StatusAggregationEndDate strfmt.DateTime `json:"statusAggregationEndDate,omitempty"`

	// The start of the period over which status has been aggregated, or null if this is the current corridor status.
	// Format: date-time
	StatusAggregationStartDate strfmt.DateTime `json:"statusAggregationStartDate,omitempty"`

	// Standard multi-mode status severity code
	StatusSeverity string `json:"statusSeverity,omitempty"`

	// Description of the status severity as applied to RoadCorridors
	StatusSeverityDescription string `json:"statusSeverityDescription,omitempty"`

	// URL to retrieve this Corridor.
	URL string `json:"url,omitempty"`
}

// Validate validates this tfl Api presentation entities road corridor
func (m *TflAPIPresentationEntitiesRoadCorridor) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateStatusAggregationEndDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatusAggregationStartDate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TflAPIPresentationEntitiesRoadCorridor) validateStatusAggregationEndDate(formats strfmt.Registry) error {

	if swag.IsZero(m.StatusAggregationEndDate) { // not required
		return nil
	}

	if err := validate.FormatOf("statusAggregationEndDate", "body", "date-time", m.StatusAggregationEndDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *TflAPIPresentationEntitiesRoadCorridor) validateStatusAggregationStartDate(formats strfmt.Registry) error {

	if swag.IsZero(m.StatusAggregationStartDate) { // not required
		return nil
	}

	if err := validate.FormatOf("statusAggregationStartDate", "body", "date-time", m.StatusAggregationStartDate.String(), formats); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *TflAPIPresentationEntitiesRoadCorridor) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TflAPIPresentationEntitiesRoadCorridor) UnmarshalBinary(b []byte) error {
	var res TflAPIPresentationEntitiesRoadCorridor
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

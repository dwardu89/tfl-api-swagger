// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// TflAPIPresentationEntitiesRouteSearchMatch tfl Api presentation entities route search match
// swagger:model Tfl.Api.Presentation.Entities.RouteSearchMatch
type TflAPIPresentationEntitiesRouteSearchMatch struct {

	// id
	ID string `json:"id,omitempty"`

	// lat
	Lat float64 `json:"lat,omitempty"`

	// line Id
	LineID string `json:"lineId,omitempty"`

	// line name
	LineName string `json:"lineName,omitempty"`

	// line route section
	LineRouteSection []*TflAPIPresentationEntitiesLineRouteSection `json:"lineRouteSection"`

	// lon
	Lon float64 `json:"lon,omitempty"`

	// matched route sections
	MatchedRouteSections []*TflAPIPresentationEntitiesMatchedRouteSections `json:"matchedRouteSections"`

	// matched stops
	MatchedStops []*TflAPIPresentationEntitiesMatchedStop `json:"matchedStops"`

	// mode
	Mode string `json:"mode,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// url
	URL string `json:"url,omitempty"`
}

// Validate validates this tfl Api presentation entities route search match
func (m *TflAPIPresentationEntitiesRouteSearchMatch) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateLineRouteSection(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMatchedRouteSections(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMatchedStops(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TflAPIPresentationEntitiesRouteSearchMatch) validateLineRouteSection(formats strfmt.Registry) error {

	if swag.IsZero(m.LineRouteSection) { // not required
		return nil
	}

	for i := 0; i < len(m.LineRouteSection); i++ {
		if swag.IsZero(m.LineRouteSection[i]) { // not required
			continue
		}

		if m.LineRouteSection[i] != nil {
			if err := m.LineRouteSection[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("lineRouteSection" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *TflAPIPresentationEntitiesRouteSearchMatch) validateMatchedRouteSections(formats strfmt.Registry) error {

	if swag.IsZero(m.MatchedRouteSections) { // not required
		return nil
	}

	for i := 0; i < len(m.MatchedRouteSections); i++ {
		if swag.IsZero(m.MatchedRouteSections[i]) { // not required
			continue
		}

		if m.MatchedRouteSections[i] != nil {
			if err := m.MatchedRouteSections[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("matchedRouteSections" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *TflAPIPresentationEntitiesRouteSearchMatch) validateMatchedStops(formats strfmt.Registry) error {

	if swag.IsZero(m.MatchedStops) { // not required
		return nil
	}

	for i := 0; i < len(m.MatchedStops); i++ {
		if swag.IsZero(m.MatchedStops[i]) { // not required
			continue
		}

		if m.MatchedStops[i] != nil {
			if err := m.MatchedStops[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("matchedStops" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *TflAPIPresentationEntitiesRouteSearchMatch) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TflAPIPresentationEntitiesRouteSearchMatch) UnmarshalBinary(b []byte) error {
	var res TflAPIPresentationEntitiesRouteSearchMatch
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

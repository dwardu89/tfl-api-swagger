// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// TflAPIPresentationEntitiesFaresTicket tfl Api presentation entities fares ticket
// swagger:model Tfl.Api.Presentation.Entities.Fares.Ticket
type TflAPIPresentationEntitiesFaresTicket struct {

	// cost
	Cost string `json:"cost,omitempty"`

	// description
	Description string `json:"description,omitempty"`

	// display order
	DisplayOrder int32 `json:"displayOrder,omitempty"`

	// messages
	Messages []*TflAPIPresentationEntitiesMessage `json:"messages"`

	// mode
	Mode string `json:"mode,omitempty"`

	// passenger type
	PassengerType string `json:"passengerType,omitempty"`

	// ticket time
	TicketTime *TflAPIPresentationEntitiesFaresTicketTime `json:"ticketTime,omitempty"`

	// ticket type
	TicketType *TflAPIPresentationEntitiesFaresTicketType `json:"ticketType,omitempty"`
}

// Validate validates this tfl Api presentation entities fares ticket
func (m *TflAPIPresentationEntitiesFaresTicket) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateMessages(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTicketTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTicketType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TflAPIPresentationEntitiesFaresTicket) validateMessages(formats strfmt.Registry) error {

	if swag.IsZero(m.Messages) { // not required
		return nil
	}

	for i := 0; i < len(m.Messages); i++ {
		if swag.IsZero(m.Messages[i]) { // not required
			continue
		}

		if m.Messages[i] != nil {
			if err := m.Messages[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("messages" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *TflAPIPresentationEntitiesFaresTicket) validateTicketTime(formats strfmt.Registry) error {

	if swag.IsZero(m.TicketTime) { // not required
		return nil
	}

	if m.TicketTime != nil {
		if err := m.TicketTime.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ticketTime")
			}
			return err
		}
	}

	return nil
}

func (m *TflAPIPresentationEntitiesFaresTicket) validateTicketType(formats strfmt.Registry) error {

	if swag.IsZero(m.TicketType) { // not required
		return nil
	}

	if m.TicketType != nil {
		if err := m.TicketType.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ticketType")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *TflAPIPresentationEntitiesFaresTicket) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TflAPIPresentationEntitiesFaresTicket) UnmarshalBinary(b []byte) error {
	var res TflAPIPresentationEntitiesFaresTicket
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

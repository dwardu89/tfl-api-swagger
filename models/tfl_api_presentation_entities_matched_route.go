// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// TflAPIPresentationEntitiesMatchedRoute Description of a Route used in Route search results.
// swagger:model Tfl.Api.Presentation.Entities.MatchedRoute
type TflAPIPresentationEntitiesMatchedRoute struct {

	// The Id (NaPTAN code) or the Destination StopPoint
	Destination string `json:"destination,omitempty"`

	// The name of the Destination StopPoint
	DestinationName string `json:"destinationName,omitempty"`

	// Inbound or Outbound
	Direction string `json:"direction,omitempty"`

	// Name such as "72"
	Name string `json:"name,omitempty"`

	// The name of the Origin StopPoint
	OriginationName string `json:"originationName,omitempty"`

	// The Id (NaPTAN code) of the Origin StopPoint
	Originator string `json:"originator,omitempty"`

	// The route code
	RouteCode string `json:"routeCode,omitempty"`

	// Regular or Night
	ServiceType string `json:"serviceType,omitempty"`

	// The DateTime that the Service containing this Route is valid from.
	// Format: date-time
	ValidFrom strfmt.DateTime `json:"validFrom,omitempty"`

	// The DateTime that the Service containing this Route is valid until.
	// Format: date-time
	ValidTo strfmt.DateTime `json:"validTo,omitempty"`
}

// Validate validates this tfl Api presentation entities matched route
func (m *TflAPIPresentationEntitiesMatchedRoute) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateValidFrom(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateValidTo(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TflAPIPresentationEntitiesMatchedRoute) validateValidFrom(formats strfmt.Registry) error {

	if swag.IsZero(m.ValidFrom) { // not required
		return nil
	}

	if err := validate.FormatOf("validFrom", "body", "date-time", m.ValidFrom.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *TflAPIPresentationEntitiesMatchedRoute) validateValidTo(formats strfmt.Registry) error {

	if swag.IsZero(m.ValidTo) { // not required
		return nil
	}

	if err := validate.FormatOf("validTo", "body", "date-time", m.ValidTo.String(), formats); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *TflAPIPresentationEntitiesMatchedRoute) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TflAPIPresentationEntitiesMatchedRoute) UnmarshalBinary(b []byte) error {
	var res TflAPIPresentationEntitiesMatchedRoute
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// TflAPIPresentationEntitiesPrediction DTO to capture the prediction details
// swagger:model Tfl.Api.Presentation.Entities.Prediction
type TflAPIPresentationEntitiesPrediction struct {

	// Bearing (between 0 to 359)
	Bearing string `json:"bearing,omitempty"`

	// The current location of the vehicle.
	CurrentLocation string `json:"currentLocation,omitempty"`

	// Name of the destination
	DestinationName string `json:"destinationName,omitempty"`

	// Naptan Identifier for the prediction's destination
	DestinationNaptanID string `json:"destinationNaptanId,omitempty"`

	// Direction (unified to inbound/outbound)
	Direction string `json:"direction,omitempty"`

	// The expected arrival time of the vehicle at the stop/station
	// Format: date-time
	ExpectedArrival strfmt.DateTime `json:"expectedArrival,omitempty"`

	// The identitier for the prediction
	ID string `json:"id,omitempty"`

	// Unique identifier for the Line
	LineID string `json:"lineId,omitempty"`

	// Line Name
	LineName string `json:"lineName,omitempty"`

	// The mode name of the station/line the prediction relates to
	ModeName string `json:"modeName,omitempty"`

	// Identifier for the prediction
	NaptanID string `json:"naptanId,omitempty"`

	// The type of the operation (1: is new or has been updated, 2: should be deleted from any client cache)
	OperationType int32 `json:"operationType,omitempty"`

	// Platform name (for bus, this is the stop letter)
	PlatformName string `json:"platformName,omitempty"`

	// Station name
	StationName string `json:"stationName,omitempty"`

	// The expiry time for the prediction
	// Format: date-time
	TimeToLive strfmt.DateTime `json:"timeToLive,omitempty"`

	// Prediction of the Time to station in seconds
	TimeToStation int32 `json:"timeToStation,omitempty"`

	// Timestamp for when the prediction was inserted/modified (source column drives what objects are broadcast on each iteration)
	// Format: date-time
	Timestamp strfmt.DateTime `json:"timestamp,omitempty"`

	// Keep the original timestamp from MongoDb fo debugging purposes
	Timing *TflAPIPresentationEntitiesPredictionTiming `json:"timing,omitempty"`

	// Routing information or other descriptive text about the path of the vehicle towards the destination
	Towards string `json:"towards,omitempty"`

	// The actual vehicle in transit (for train modes, the leading car of the rolling set)
	VehicleID string `json:"vehicleId,omitempty"`
}

// Validate validates this tfl Api presentation entities prediction
func (m *TflAPIPresentationEntitiesPrediction) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateExpectedArrival(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTimeToLive(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTimestamp(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTiming(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TflAPIPresentationEntitiesPrediction) validateExpectedArrival(formats strfmt.Registry) error {

	if swag.IsZero(m.ExpectedArrival) { // not required
		return nil
	}

	if err := validate.FormatOf("expectedArrival", "body", "date-time", m.ExpectedArrival.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *TflAPIPresentationEntitiesPrediction) validateTimeToLive(formats strfmt.Registry) error {

	if swag.IsZero(m.TimeToLive) { // not required
		return nil
	}

	if err := validate.FormatOf("timeToLive", "body", "date-time", m.TimeToLive.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *TflAPIPresentationEntitiesPrediction) validateTimestamp(formats strfmt.Registry) error {

	if swag.IsZero(m.Timestamp) { // not required
		return nil
	}

	if err := validate.FormatOf("timestamp", "body", "date-time", m.Timestamp.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *TflAPIPresentationEntitiesPrediction) validateTiming(formats strfmt.Registry) error {

	if swag.IsZero(m.Timing) { // not required
		return nil
	}

	if m.Timing != nil {
		if err := m.Timing.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("timing")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *TflAPIPresentationEntitiesPrediction) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TflAPIPresentationEntitiesPrediction) UnmarshalBinary(b []byte) error {
	var res TflAPIPresentationEntitiesPrediction
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

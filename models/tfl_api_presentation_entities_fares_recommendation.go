// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// TflAPIPresentationEntitiesFaresRecommendation tfl Api presentation entities fares recommendation
// swagger:model Tfl.Api.Presentation.Entities.Fares.Recommendation
type TflAPIPresentationEntitiesFaresRecommendation struct {

	// cost
	Cost string `json:"cost,omitempty"`

	// discount card
	DiscountCard string `json:"discountCard,omitempty"`

	// fare type
	FareType string `json:"fareType,omitempty"`

	// getting your ticket
	GettingYourTicket []*TflAPIPresentationEntitiesMessage `json:"gettingYourTicket"`

	// id
	ID int32 `json:"id,omitempty"`

	// key features
	KeyFeatures []*TflAPIPresentationEntitiesMessage `json:"keyFeatures"`

	// notes
	Notes []*TflAPIPresentationEntitiesMessage `json:"notes"`

	// price comparison
	PriceComparison string `json:"priceComparison,omitempty"`

	// price description
	PriceDescription string `json:"priceDescription,omitempty"`

	// product
	Product string `json:"product,omitempty"`

	// product type
	ProductType string `json:"productType,omitempty"`

	// rank
	Rank int32 `json:"rank,omitempty"`

	// recommended top up
	RecommendedTopUp string `json:"recommendedTopUp,omitempty"`

	// rule
	Rule int32 `json:"rule,omitempty"`

	// single fare
	SingleFare float64 `json:"singleFare,omitempty"`

	// ticket time
	TicketTime string `json:"ticketTime,omitempty"`

	// ticket type
	TicketType string `json:"ticketType,omitempty"`

	// zones
	Zones string `json:"zones,omitempty"`
}

// Validate validates this tfl Api presentation entities fares recommendation
func (m *TflAPIPresentationEntitiesFaresRecommendation) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateGettingYourTicket(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateKeyFeatures(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNotes(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TflAPIPresentationEntitiesFaresRecommendation) validateGettingYourTicket(formats strfmt.Registry) error {

	if swag.IsZero(m.GettingYourTicket) { // not required
		return nil
	}

	for i := 0; i < len(m.GettingYourTicket); i++ {
		if swag.IsZero(m.GettingYourTicket[i]) { // not required
			continue
		}

		if m.GettingYourTicket[i] != nil {
			if err := m.GettingYourTicket[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("gettingYourTicket" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *TflAPIPresentationEntitiesFaresRecommendation) validateKeyFeatures(formats strfmt.Registry) error {

	if swag.IsZero(m.KeyFeatures) { // not required
		return nil
	}

	for i := 0; i < len(m.KeyFeatures); i++ {
		if swag.IsZero(m.KeyFeatures[i]) { // not required
			continue
		}

		if m.KeyFeatures[i] != nil {
			if err := m.KeyFeatures[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("keyFeatures" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *TflAPIPresentationEntitiesFaresRecommendation) validateNotes(formats strfmt.Registry) error {

	if swag.IsZero(m.Notes) { // not required
		return nil
	}

	for i := 0; i < len(m.Notes); i++ {
		if swag.IsZero(m.Notes[i]) { // not required
			continue
		}

		if m.Notes[i] != nil {
			if err := m.Notes[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("notes" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *TflAPIPresentationEntitiesFaresRecommendation) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TflAPIPresentationEntitiesFaresRecommendation) UnmarshalBinary(b []byte) error {
	var res TflAPIPresentationEntitiesFaresRecommendation
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// TflAPIPresentationEntitiesLine tfl Api presentation entities line
// swagger:model Tfl.Api.Presentation.Entities.Line
type TflAPIPresentationEntitiesLine struct {

	// created
	// Format: date-time
	Created strfmt.DateTime `json:"created,omitempty"`

	// crowding
	Crowding *TflAPIPresentationEntitiesCrowding `json:"crowding,omitempty"`

	// disruptions
	Disruptions []*TflAPIPresentationEntitiesDisruption `json:"disruptions"`

	// id
	ID string `json:"id,omitempty"`

	// line statuses
	LineStatuses []*TflAPIPresentationEntitiesLineStatus `json:"lineStatuses"`

	// mode name
	ModeName string `json:"modeName,omitempty"`

	// modified
	// Format: date-time
	Modified strfmt.DateTime `json:"modified,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// route sections
	RouteSections []*TflAPIPresentationEntitiesMatchedRoute `json:"routeSections"`

	// service types
	ServiceTypes []*TflAPIPresentationEntitiesLineServiceTypeInfo `json:"serviceTypes"`
}

// Validate validates this tfl Api presentation entities line
func (m *TflAPIPresentationEntitiesLine) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCreated(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCrowding(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDisruptions(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLineStatuses(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateModified(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRouteSections(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateServiceTypes(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TflAPIPresentationEntitiesLine) validateCreated(formats strfmt.Registry) error {

	if swag.IsZero(m.Created) { // not required
		return nil
	}

	if err := validate.FormatOf("created", "body", "date-time", m.Created.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *TflAPIPresentationEntitiesLine) validateCrowding(formats strfmt.Registry) error {

	if swag.IsZero(m.Crowding) { // not required
		return nil
	}

	if m.Crowding != nil {
		if err := m.Crowding.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("crowding")
			}
			return err
		}
	}

	return nil
}

func (m *TflAPIPresentationEntitiesLine) validateDisruptions(formats strfmt.Registry) error {

	if swag.IsZero(m.Disruptions) { // not required
		return nil
	}

	for i := 0; i < len(m.Disruptions); i++ {
		if swag.IsZero(m.Disruptions[i]) { // not required
			continue
		}

		if m.Disruptions[i] != nil {
			if err := m.Disruptions[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("disruptions" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *TflAPIPresentationEntitiesLine) validateLineStatuses(formats strfmt.Registry) error {

	if swag.IsZero(m.LineStatuses) { // not required
		return nil
	}

	for i := 0; i < len(m.LineStatuses); i++ {
		if swag.IsZero(m.LineStatuses[i]) { // not required
			continue
		}

		if m.LineStatuses[i] != nil {
			if err := m.LineStatuses[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("lineStatuses" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *TflAPIPresentationEntitiesLine) validateModified(formats strfmt.Registry) error {

	if swag.IsZero(m.Modified) { // not required
		return nil
	}

	if err := validate.FormatOf("modified", "body", "date-time", m.Modified.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *TflAPIPresentationEntitiesLine) validateRouteSections(formats strfmt.Registry) error {

	if swag.IsZero(m.RouteSections) { // not required
		return nil
	}

	for i := 0; i < len(m.RouteSections); i++ {
		if swag.IsZero(m.RouteSections[i]) { // not required
			continue
		}

		if m.RouteSections[i] != nil {
			if err := m.RouteSections[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("routeSections" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *TflAPIPresentationEntitiesLine) validateServiceTypes(formats strfmt.Registry) error {

	if swag.IsZero(m.ServiceTypes) { // not required
		return nil
	}

	for i := 0; i < len(m.ServiceTypes); i++ {
		if swag.IsZero(m.ServiceTypes[i]) { // not required
			continue
		}

		if m.ServiceTypes[i] != nil {
			if err := m.ServiceTypes[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("serviceTypes" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *TflAPIPresentationEntitiesLine) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TflAPIPresentationEntitiesLine) UnmarshalBinary(b []byte) error {
	var res TflAPIPresentationEntitiesLine
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

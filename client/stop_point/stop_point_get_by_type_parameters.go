// Code generated by go-swagger; DO NOT EDIT.

package stop_point

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewStopPointGetByTypeParams creates a new StopPointGetByTypeParams object
// with the default values initialized.
func NewStopPointGetByTypeParams() *StopPointGetByTypeParams {
	var ()
	return &StopPointGetByTypeParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewStopPointGetByTypeParamsWithTimeout creates a new StopPointGetByTypeParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewStopPointGetByTypeParamsWithTimeout(timeout time.Duration) *StopPointGetByTypeParams {
	var ()
	return &StopPointGetByTypeParams{

		timeout: timeout,
	}
}

// NewStopPointGetByTypeParamsWithContext creates a new StopPointGetByTypeParams object
// with the default values initialized, and the ability to set a context for a request
func NewStopPointGetByTypeParamsWithContext(ctx context.Context) *StopPointGetByTypeParams {
	var ()
	return &StopPointGetByTypeParams{

		Context: ctx,
	}
}

// NewStopPointGetByTypeParamsWithHTTPClient creates a new StopPointGetByTypeParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewStopPointGetByTypeParamsWithHTTPClient(client *http.Client) *StopPointGetByTypeParams {
	var ()
	return &StopPointGetByTypeParams{
		HTTPClient: client,
	}
}

/*StopPointGetByTypeParams contains all the parameters to send to the API endpoint
for the stop point get by type operation typically these are written to a http.Request
*/
type StopPointGetByTypeParams struct {

	/*Types
	  A comma-separated list of the types to return. Max. approx. 12 types.
	            A list of valid stop types can be obtained from the StopPoint/meta/stoptypes endpoint.

	*/
	Types []string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the stop point get by type params
func (o *StopPointGetByTypeParams) WithTimeout(timeout time.Duration) *StopPointGetByTypeParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the stop point get by type params
func (o *StopPointGetByTypeParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the stop point get by type params
func (o *StopPointGetByTypeParams) WithContext(ctx context.Context) *StopPointGetByTypeParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the stop point get by type params
func (o *StopPointGetByTypeParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the stop point get by type params
func (o *StopPointGetByTypeParams) WithHTTPClient(client *http.Client) *StopPointGetByTypeParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the stop point get by type params
func (o *StopPointGetByTypeParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithTypes adds the types to the stop point get by type params
func (o *StopPointGetByTypeParams) WithTypes(types []string) *StopPointGetByTypeParams {
	o.SetTypes(types)
	return o
}

// SetTypes adds the types to the stop point get by type params
func (o *StopPointGetByTypeParams) SetTypes(types []string) {
	o.Types = types
}

// WriteToRequest writes these params to a swagger request
func (o *StopPointGetByTypeParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	valuesTypes := o.Types

	joinedTypes := swag.JoinByFormat(valuesTypes, "")
	// path array param types
	// SetPathParam does not support variadric arguments, since we used JoinByFormat
	// we can send the first item in the array as it's all the items of the previous
	// array joined together
	if len(joinedTypes) > 0 {
		if err := r.SetPathParam("types", joinedTypes[0]); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

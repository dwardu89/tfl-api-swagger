// Code generated by go-swagger; DO NOT EDIT.

package stop_point

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewStopPointRouteParams creates a new StopPointRouteParams object
// with the default values initialized.
func NewStopPointRouteParams() *StopPointRouteParams {
	var ()
	return &StopPointRouteParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewStopPointRouteParamsWithTimeout creates a new StopPointRouteParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewStopPointRouteParamsWithTimeout(timeout time.Duration) *StopPointRouteParams {
	var ()
	return &StopPointRouteParams{

		timeout: timeout,
	}
}

// NewStopPointRouteParamsWithContext creates a new StopPointRouteParams object
// with the default values initialized, and the ability to set a context for a request
func NewStopPointRouteParamsWithContext(ctx context.Context) *StopPointRouteParams {
	var ()
	return &StopPointRouteParams{

		Context: ctx,
	}
}

// NewStopPointRouteParamsWithHTTPClient creates a new StopPointRouteParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewStopPointRouteParamsWithHTTPClient(client *http.Client) *StopPointRouteParams {
	var ()
	return &StopPointRouteParams{
		HTTPClient: client,
	}
}

/*StopPointRouteParams contains all the parameters to send to the API endpoint
for the stop point route operation typically these are written to a http.Request
*/
type StopPointRouteParams struct {

	/*ID
	  A stop point id (station naptan codes e.g. 940GZZLUASL, you can use /StopPoint/Search/{query} endpoint to find a stop point id from a station name)

	*/
	ID string
	/*ServiceTypes
	  A comma-separated list of service types to filter on. If not specified. Supported values: Regular, Night. Defaulted to 'Regular' if not specified

	*/
	ServiceTypes []string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the stop point route params
func (o *StopPointRouteParams) WithTimeout(timeout time.Duration) *StopPointRouteParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the stop point route params
func (o *StopPointRouteParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the stop point route params
func (o *StopPointRouteParams) WithContext(ctx context.Context) *StopPointRouteParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the stop point route params
func (o *StopPointRouteParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the stop point route params
func (o *StopPointRouteParams) WithHTTPClient(client *http.Client) *StopPointRouteParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the stop point route params
func (o *StopPointRouteParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithID adds the id to the stop point route params
func (o *StopPointRouteParams) WithID(id string) *StopPointRouteParams {
	o.SetID(id)
	return o
}

// SetID adds the id to the stop point route params
func (o *StopPointRouteParams) SetID(id string) {
	o.ID = id
}

// WithServiceTypes adds the serviceTypes to the stop point route params
func (o *StopPointRouteParams) WithServiceTypes(serviceTypes []string) *StopPointRouteParams {
	o.SetServiceTypes(serviceTypes)
	return o
}

// SetServiceTypes adds the serviceTypes to the stop point route params
func (o *StopPointRouteParams) SetServiceTypes(serviceTypes []string) {
	o.ServiceTypes = serviceTypes
}

// WriteToRequest writes these params to a swagger request
func (o *StopPointRouteParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param id
	if err := r.SetPathParam("id", o.ID); err != nil {
		return err
	}

	valuesServiceTypes := o.ServiceTypes

	joinedServiceTypes := swag.JoinByFormat(valuesServiceTypes, "multi")
	// query array param serviceTypes
	if err := r.SetQueryParam("serviceTypes", joinedServiceTypes...); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

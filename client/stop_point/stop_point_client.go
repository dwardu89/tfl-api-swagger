// Code generated by go-swagger; DO NOT EDIT.

package stop_point

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new stop point API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for stop point API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
StopPointArrivals gets the list of arrival predictions for the given stop point id
*/
func (a *Client) StopPointArrivals(params *StopPointArrivalsParams) (*StopPointArrivalsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStopPointArrivalsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "StopPoint_Arrivals",
		Method:             "GET",
		PathPattern:        "/StopPoint/{id}/Arrivals",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &StopPointArrivalsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StopPointArrivalsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for StopPoint_Arrivals: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
StopPointCrowding gets all the crowding data static for the stop point Id plus crowding data for a given line and optionally a particular direction
*/
func (a *Client) StopPointCrowding(params *StopPointCrowdingParams) (*StopPointCrowdingOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStopPointCrowdingParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "StopPoint_Crowding",
		Method:             "GET",
		PathPattern:        "/StopPoint/{id}/Crowding/{line}",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &StopPointCrowdingReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StopPointCrowdingOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for StopPoint_Crowding: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
StopPointDirection returns the canonical direction inbound or outbound for a given pair of stop point ids in the direction from and gt to
*/
func (a *Client) StopPointDirection(params *StopPointDirectionParams) (*StopPointDirectionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStopPointDirectionParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "StopPoint_Direction",
		Method:             "GET",
		PathPattern:        "/StopPoint/{id}/DirectionTo/{toStopPointId}",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &StopPointDirectionReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StopPointDirectionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for StopPoint_Direction: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
StopPointDisruption gets all disruptions for the specified stop point Id plus disruptions for any child naptan records it may have
*/
func (a *Client) StopPointDisruption(params *StopPointDisruptionParams) (*StopPointDisruptionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStopPointDisruptionParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "StopPoint_Disruption",
		Method:             "GET",
		PathPattern:        "/StopPoint/{ids}/Disruption",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &StopPointDisruptionReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StopPointDisruptionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for StopPoint_Disruption: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
StopPointDisruptionByMode gets a distinct list of disrupted stop points for the given modes
*/
func (a *Client) StopPointDisruptionByMode(params *StopPointDisruptionByModeParams) (*StopPointDisruptionByModeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStopPointDisruptionByModeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "StopPoint_DisruptionByMode",
		Method:             "GET",
		PathPattern:        "/StopPoint/Mode/{modes}/Disruption",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &StopPointDisruptionByModeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StopPointDisruptionByModeOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for StopPoint_DisruptionByMode: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
StopPointGet gets a list of stop points corresponding to the given list of stop ids
*/
func (a *Client) StopPointGet(params *StopPointGetParams) (*StopPointGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStopPointGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "StopPoint_Get",
		Method:             "GET",
		PathPattern:        "/StopPoint/{ids}",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &StopPointGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StopPointGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for StopPoint_Get: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
StopPointGetByGeoPoint gets a list of stop points within radius by the specified criteria
*/
func (a *Client) StopPointGetByGeoPoint(params *StopPointGetByGeoPointParams) (*StopPointGetByGeoPointOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStopPointGetByGeoPointParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "StopPoint_GetByGeoPoint",
		Method:             "GET",
		PathPattern:        "/StopPoint",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &StopPointGetByGeoPointReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StopPointGetByGeoPointOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for StopPoint_GetByGeoPoint: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
StopPointGetByMode gets a list of stop points filtered by the modes available at that stop point
*/
func (a *Client) StopPointGetByMode(params *StopPointGetByModeParams) (*StopPointGetByModeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStopPointGetByModeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "StopPoint_GetByMode",
		Method:             "GET",
		PathPattern:        "/StopPoint/Mode/{modes}",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &StopPointGetByModeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StopPointGetByModeOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for StopPoint_GetByMode: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
StopPointGetBySms gets a stop point for a given sms code
*/
func (a *Client) StopPointGetBySms(params *StopPointGetBySmsParams) (*StopPointGetBySmsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStopPointGetBySmsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "StopPoint_GetBySms",
		Method:             "GET",
		PathPattern:        "/StopPoint/Sms/{id}",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &StopPointGetBySmsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StopPointGetBySmsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for StopPoint_GetBySms: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
StopPointGetByType gets all stop points of a given type
*/
func (a *Client) StopPointGetByType(params *StopPointGetByTypeParams) (*StopPointGetByTypeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStopPointGetByTypeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "StopPoint_GetByType",
		Method:             "GET",
		PathPattern:        "/StopPoint/Type/{types}",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &StopPointGetByTypeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StopPointGetByTypeOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for StopPoint_GetByType: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
StopPointGetByTypeWithPagination gets all the stop points of given type s with a page number
*/
func (a *Client) StopPointGetByTypeWithPagination(params *StopPointGetByTypeWithPaginationParams) (*StopPointGetByTypeWithPaginationOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStopPointGetByTypeWithPaginationParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "StopPoint_GetByTypeWithPagination",
		Method:             "GET",
		PathPattern:        "/StopPoint/Type/{types}/page/{page}",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &StopPointGetByTypeWithPaginationReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StopPointGetByTypeWithPaginationOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for StopPoint_GetByTypeWithPagination: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
StopPointGetCarParksByID gets car parks corresponding to the given stop point id
*/
func (a *Client) StopPointGetCarParksByID(params *StopPointGetCarParksByIDParams) (*StopPointGetCarParksByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStopPointGetCarParksByIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "StopPoint_GetCarParksById",
		Method:             "GET",
		PathPattern:        "/StopPoint/{stopPointId}/CarParks",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &StopPointGetCarParksByIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StopPointGetCarParksByIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for StopPoint_GetCarParksById: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
StopPointGetServiceTypes gets the service types for a given stoppoint
*/
func (a *Client) StopPointGetServiceTypes(params *StopPointGetServiceTypesParams) (*StopPointGetServiceTypesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStopPointGetServiceTypesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "StopPoint_GetServiceTypes",
		Method:             "GET",
		PathPattern:        "/StopPoint/ServiceTypes",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &StopPointGetServiceTypesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StopPointGetServiceTypesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for StopPoint_GetServiceTypes: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
StopPointGetTaxiRanksByIds gets a list of taxi ranks corresponding to the given stop point id
*/
func (a *Client) StopPointGetTaxiRanksByIds(params *StopPointGetTaxiRanksByIdsParams) (*StopPointGetTaxiRanksByIdsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStopPointGetTaxiRanksByIdsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "StopPoint_GetTaxiRanksByIds",
		Method:             "GET",
		PathPattern:        "/StopPoint/{stopPointId}/TaxiRanks",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &StopPointGetTaxiRanksByIdsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StopPointGetTaxiRanksByIdsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for StopPoint_GetTaxiRanksByIds: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
StopPointMetaCategories gets the list of available stop point additional information categories
*/
func (a *Client) StopPointMetaCategories(params *StopPointMetaCategoriesParams) (*StopPointMetaCategoriesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStopPointMetaCategoriesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "StopPoint_MetaCategories",
		Method:             "GET",
		PathPattern:        "/StopPoint/Meta/Categories",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &StopPointMetaCategoriesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StopPointMetaCategoriesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for StopPoint_MetaCategories: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
StopPointMetaModes gets the list of available stop point modes
*/
func (a *Client) StopPointMetaModes(params *StopPointMetaModesParams) (*StopPointMetaModesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStopPointMetaModesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "StopPoint_MetaModes",
		Method:             "GET",
		PathPattern:        "/StopPoint/Meta/Modes",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &StopPointMetaModesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StopPointMetaModesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for StopPoint_MetaModes: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
StopPointMetaStopTypes gets the list of available stop point types
*/
func (a *Client) StopPointMetaStopTypes(params *StopPointMetaStopTypesParams) (*StopPointMetaStopTypesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStopPointMetaStopTypesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "StopPoint_MetaStopTypes",
		Method:             "GET",
		PathPattern:        "/StopPoint/Meta/StopTypes",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &StopPointMetaStopTypesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StopPointMetaStopTypesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for StopPoint_MetaStopTypes: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
StopPointReachableFrom gets stopoints that are reachable from a station line combination
*/
func (a *Client) StopPointReachableFrom(params *StopPointReachableFromParams) (*StopPointReachableFromOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStopPointReachableFromParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "StopPoint_ReachableFrom",
		Method:             "GET",
		PathPattern:        "/StopPoint/{id}/CanReachOnLine/{lineId}",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &StopPointReachableFromReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StopPointReachableFromOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for StopPoint_ReachableFrom: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
StopPointRoute returns the route sections for all the lines that service the given stop point ids
*/
func (a *Client) StopPointRoute(params *StopPointRouteParams) (*StopPointRouteOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStopPointRouteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "StopPoint_Route",
		Method:             "GET",
		PathPattern:        "/StopPoint/{id}/Route",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &StopPointRouteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StopPointRouteOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for StopPoint_Route: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
StopPointSearch searches stop points by their common name or their 5 digit countdown bus stop code
*/
func (a *Client) StopPointSearch(params *StopPointSearchParams) (*StopPointSearchOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStopPointSearchParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "StopPoint_Search",
		Method:             "GET",
		PathPattern:        "/StopPoint/Search/{query}",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &StopPointSearchReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StopPointSearchOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for StopPoint_Search: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}

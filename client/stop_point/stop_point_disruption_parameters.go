// Code generated by go-swagger; DO NOT EDIT.

package stop_point

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewStopPointDisruptionParams creates a new StopPointDisruptionParams object
// with the default values initialized.
func NewStopPointDisruptionParams() *StopPointDisruptionParams {
	var ()
	return &StopPointDisruptionParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewStopPointDisruptionParamsWithTimeout creates a new StopPointDisruptionParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewStopPointDisruptionParamsWithTimeout(timeout time.Duration) *StopPointDisruptionParams {
	var ()
	return &StopPointDisruptionParams{

		timeout: timeout,
	}
}

// NewStopPointDisruptionParamsWithContext creates a new StopPointDisruptionParams object
// with the default values initialized, and the ability to set a context for a request
func NewStopPointDisruptionParamsWithContext(ctx context.Context) *StopPointDisruptionParams {
	var ()
	return &StopPointDisruptionParams{

		Context: ctx,
	}
}

// NewStopPointDisruptionParamsWithHTTPClient creates a new StopPointDisruptionParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewStopPointDisruptionParamsWithHTTPClient(client *http.Client) *StopPointDisruptionParams {
	var ()
	return &StopPointDisruptionParams{
		HTTPClient: client,
	}
}

/*StopPointDisruptionParams contains all the parameters to send to the API endpoint
for the stop point disruption operation typically these are written to a http.Request
*/
type StopPointDisruptionParams struct {

	/*FlattenResponse
	  Specify true to associate all disruptions with parent stop point. (Only applicable when getFamily is true).

	*/
	FlattenResponse *bool
	/*GetFamily
	  Specify true to return disruptions for entire family, or false to return disruptions for just this stop point. Defaults to false.

	*/
	GetFamily *bool
	/*Ids
	  A comma-seperated list of stop point ids. Max. approx. 20 ids.
	            You can use /StopPoint/Search/{query} endpoint to find a stop point id from a station name.

	*/
	Ids []string
	/*IncludeRouteBlockedStops*/
	IncludeRouteBlockedStops *bool

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the stop point disruption params
func (o *StopPointDisruptionParams) WithTimeout(timeout time.Duration) *StopPointDisruptionParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the stop point disruption params
func (o *StopPointDisruptionParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the stop point disruption params
func (o *StopPointDisruptionParams) WithContext(ctx context.Context) *StopPointDisruptionParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the stop point disruption params
func (o *StopPointDisruptionParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the stop point disruption params
func (o *StopPointDisruptionParams) WithHTTPClient(client *http.Client) *StopPointDisruptionParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the stop point disruption params
func (o *StopPointDisruptionParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithFlattenResponse adds the flattenResponse to the stop point disruption params
func (o *StopPointDisruptionParams) WithFlattenResponse(flattenResponse *bool) *StopPointDisruptionParams {
	o.SetFlattenResponse(flattenResponse)
	return o
}

// SetFlattenResponse adds the flattenResponse to the stop point disruption params
func (o *StopPointDisruptionParams) SetFlattenResponse(flattenResponse *bool) {
	o.FlattenResponse = flattenResponse
}

// WithGetFamily adds the getFamily to the stop point disruption params
func (o *StopPointDisruptionParams) WithGetFamily(getFamily *bool) *StopPointDisruptionParams {
	o.SetGetFamily(getFamily)
	return o
}

// SetGetFamily adds the getFamily to the stop point disruption params
func (o *StopPointDisruptionParams) SetGetFamily(getFamily *bool) {
	o.GetFamily = getFamily
}

// WithIds adds the ids to the stop point disruption params
func (o *StopPointDisruptionParams) WithIds(ids []string) *StopPointDisruptionParams {
	o.SetIds(ids)
	return o
}

// SetIds adds the ids to the stop point disruption params
func (o *StopPointDisruptionParams) SetIds(ids []string) {
	o.Ids = ids
}

// WithIncludeRouteBlockedStops adds the includeRouteBlockedStops to the stop point disruption params
func (o *StopPointDisruptionParams) WithIncludeRouteBlockedStops(includeRouteBlockedStops *bool) *StopPointDisruptionParams {
	o.SetIncludeRouteBlockedStops(includeRouteBlockedStops)
	return o
}

// SetIncludeRouteBlockedStops adds the includeRouteBlockedStops to the stop point disruption params
func (o *StopPointDisruptionParams) SetIncludeRouteBlockedStops(includeRouteBlockedStops *bool) {
	o.IncludeRouteBlockedStops = includeRouteBlockedStops
}

// WriteToRequest writes these params to a swagger request
func (o *StopPointDisruptionParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.FlattenResponse != nil {

		// query param flattenResponse
		var qrFlattenResponse bool
		if o.FlattenResponse != nil {
			qrFlattenResponse = *o.FlattenResponse
		}
		qFlattenResponse := swag.FormatBool(qrFlattenResponse)
		if qFlattenResponse != "" {
			if err := r.SetQueryParam("flattenResponse", qFlattenResponse); err != nil {
				return err
			}
		}

	}

	if o.GetFamily != nil {

		// query param getFamily
		var qrGetFamily bool
		if o.GetFamily != nil {
			qrGetFamily = *o.GetFamily
		}
		qGetFamily := swag.FormatBool(qrGetFamily)
		if qGetFamily != "" {
			if err := r.SetQueryParam("getFamily", qGetFamily); err != nil {
				return err
			}
		}

	}

	valuesIds := o.Ids

	joinedIds := swag.JoinByFormat(valuesIds, "")
	// path array param ids
	// SetPathParam does not support variadric arguments, since we used JoinByFormat
	// we can send the first item in the array as it's all the items of the previous
	// array joined together
	if len(joinedIds) > 0 {
		if err := r.SetPathParam("ids", joinedIds[0]); err != nil {
			return err
		}
	}

	if o.IncludeRouteBlockedStops != nil {

		// query param includeRouteBlockedStops
		var qrIncludeRouteBlockedStops bool
		if o.IncludeRouteBlockedStops != nil {
			qrIncludeRouteBlockedStops = *o.IncludeRouteBlockedStops
		}
		qIncludeRouteBlockedStops := swag.FormatBool(qrIncludeRouteBlockedStops)
		if qIncludeRouteBlockedStops != "" {
			if err := r.SetQueryParam("includeRouteBlockedStops", qIncludeRouteBlockedStops); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

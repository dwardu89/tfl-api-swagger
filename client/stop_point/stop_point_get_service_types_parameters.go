// Code generated by go-swagger; DO NOT EDIT.

package stop_point

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewStopPointGetServiceTypesParams creates a new StopPointGetServiceTypesParams object
// with the default values initialized.
func NewStopPointGetServiceTypesParams() *StopPointGetServiceTypesParams {
	var ()
	return &StopPointGetServiceTypesParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewStopPointGetServiceTypesParamsWithTimeout creates a new StopPointGetServiceTypesParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewStopPointGetServiceTypesParamsWithTimeout(timeout time.Duration) *StopPointGetServiceTypesParams {
	var ()
	return &StopPointGetServiceTypesParams{

		timeout: timeout,
	}
}

// NewStopPointGetServiceTypesParamsWithContext creates a new StopPointGetServiceTypesParams object
// with the default values initialized, and the ability to set a context for a request
func NewStopPointGetServiceTypesParamsWithContext(ctx context.Context) *StopPointGetServiceTypesParams {
	var ()
	return &StopPointGetServiceTypesParams{

		Context: ctx,
	}
}

// NewStopPointGetServiceTypesParamsWithHTTPClient creates a new StopPointGetServiceTypesParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewStopPointGetServiceTypesParamsWithHTTPClient(client *http.Client) *StopPointGetServiceTypesParams {
	var ()
	return &StopPointGetServiceTypesParams{
		HTTPClient: client,
	}
}

/*StopPointGetServiceTypesParams contains all the parameters to send to the API endpoint
for the stop point get service types operation typically these are written to a http.Request
*/
type StopPointGetServiceTypesParams struct {

	/*ID
	  The Naptan id of the stop

	*/
	ID string
	/*LineIds
	  The lines which contain the given Naptan id (all lines relevant to the given stoppoint if empty)

	*/
	LineIds []string
	/*Modes
	  The modes which the lines are relevant to (all if empty)

	*/
	Modes []string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the stop point get service types params
func (o *StopPointGetServiceTypesParams) WithTimeout(timeout time.Duration) *StopPointGetServiceTypesParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the stop point get service types params
func (o *StopPointGetServiceTypesParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the stop point get service types params
func (o *StopPointGetServiceTypesParams) WithContext(ctx context.Context) *StopPointGetServiceTypesParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the stop point get service types params
func (o *StopPointGetServiceTypesParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the stop point get service types params
func (o *StopPointGetServiceTypesParams) WithHTTPClient(client *http.Client) *StopPointGetServiceTypesParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the stop point get service types params
func (o *StopPointGetServiceTypesParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithID adds the id to the stop point get service types params
func (o *StopPointGetServiceTypesParams) WithID(id string) *StopPointGetServiceTypesParams {
	o.SetID(id)
	return o
}

// SetID adds the id to the stop point get service types params
func (o *StopPointGetServiceTypesParams) SetID(id string) {
	o.ID = id
}

// WithLineIds adds the lineIds to the stop point get service types params
func (o *StopPointGetServiceTypesParams) WithLineIds(lineIds []string) *StopPointGetServiceTypesParams {
	o.SetLineIds(lineIds)
	return o
}

// SetLineIds adds the lineIds to the stop point get service types params
func (o *StopPointGetServiceTypesParams) SetLineIds(lineIds []string) {
	o.LineIds = lineIds
}

// WithModes adds the modes to the stop point get service types params
func (o *StopPointGetServiceTypesParams) WithModes(modes []string) *StopPointGetServiceTypesParams {
	o.SetModes(modes)
	return o
}

// SetModes adds the modes to the stop point get service types params
func (o *StopPointGetServiceTypesParams) SetModes(modes []string) {
	o.Modes = modes
}

// WriteToRequest writes these params to a swagger request
func (o *StopPointGetServiceTypesParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// query param id
	qrID := o.ID
	qID := qrID
	if qID != "" {
		if err := r.SetQueryParam("id", qID); err != nil {
			return err
		}
	}

	valuesLineIds := o.LineIds

	joinedLineIds := swag.JoinByFormat(valuesLineIds, "multi")
	// query array param lineIds
	if err := r.SetQueryParam("lineIds", joinedLineIds...); err != nil {
		return err
	}

	valuesModes := o.Modes

	joinedModes := swag.JoinByFormat(valuesModes, "multi")
	// query array param modes
	if err := r.SetQueryParam("modes", joinedModes...); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

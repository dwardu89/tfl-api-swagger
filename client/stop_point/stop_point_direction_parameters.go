// Code generated by go-swagger; DO NOT EDIT.

package stop_point

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"
)

// NewStopPointDirectionParams creates a new StopPointDirectionParams object
// with the default values initialized.
func NewStopPointDirectionParams() *StopPointDirectionParams {
	var ()
	return &StopPointDirectionParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewStopPointDirectionParamsWithTimeout creates a new StopPointDirectionParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewStopPointDirectionParamsWithTimeout(timeout time.Duration) *StopPointDirectionParams {
	var ()
	return &StopPointDirectionParams{

		timeout: timeout,
	}
}

// NewStopPointDirectionParamsWithContext creates a new StopPointDirectionParams object
// with the default values initialized, and the ability to set a context for a request
func NewStopPointDirectionParamsWithContext(ctx context.Context) *StopPointDirectionParams {
	var ()
	return &StopPointDirectionParams{

		Context: ctx,
	}
}

// NewStopPointDirectionParamsWithHTTPClient creates a new StopPointDirectionParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewStopPointDirectionParamsWithHTTPClient(client *http.Client) *StopPointDirectionParams {
	var ()
	return &StopPointDirectionParams{
		HTTPClient: client,
	}
}

/*StopPointDirectionParams contains all the parameters to send to the API endpoint
for the stop point direction operation typically these are written to a http.Request
*/
type StopPointDirectionParams struct {

	/*ID
	  Originating stop id (station naptan code e.g. 940GZZLUASL, you can use /StopPoint/Search/{query} endpoint to find a stop point id from a station name)

	*/
	ID string
	/*LineID
	  Optional line id filter e.g. victoria

	*/
	LineID *string
	/*ToStopPointID
	  Destination stop id (station naptan code e.g. 940GZZLUASL, you can use /StopPoint/Search/{query} endpoint to find a stop point id from a station name)

	*/
	ToStopPointID string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the stop point direction params
func (o *StopPointDirectionParams) WithTimeout(timeout time.Duration) *StopPointDirectionParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the stop point direction params
func (o *StopPointDirectionParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the stop point direction params
func (o *StopPointDirectionParams) WithContext(ctx context.Context) *StopPointDirectionParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the stop point direction params
func (o *StopPointDirectionParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the stop point direction params
func (o *StopPointDirectionParams) WithHTTPClient(client *http.Client) *StopPointDirectionParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the stop point direction params
func (o *StopPointDirectionParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithID adds the id to the stop point direction params
func (o *StopPointDirectionParams) WithID(id string) *StopPointDirectionParams {
	o.SetID(id)
	return o
}

// SetID adds the id to the stop point direction params
func (o *StopPointDirectionParams) SetID(id string) {
	o.ID = id
}

// WithLineID adds the lineID to the stop point direction params
func (o *StopPointDirectionParams) WithLineID(lineID *string) *StopPointDirectionParams {
	o.SetLineID(lineID)
	return o
}

// SetLineID adds the lineId to the stop point direction params
func (o *StopPointDirectionParams) SetLineID(lineID *string) {
	o.LineID = lineID
}

// WithToStopPointID adds the toStopPointID to the stop point direction params
func (o *StopPointDirectionParams) WithToStopPointID(toStopPointID string) *StopPointDirectionParams {
	o.SetToStopPointID(toStopPointID)
	return o
}

// SetToStopPointID adds the toStopPointId to the stop point direction params
func (o *StopPointDirectionParams) SetToStopPointID(toStopPointID string) {
	o.ToStopPointID = toStopPointID
}

// WriteToRequest writes these params to a swagger request
func (o *StopPointDirectionParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param id
	if err := r.SetPathParam("id", o.ID); err != nil {
		return err
	}

	if o.LineID != nil {

		// query param lineId
		var qrLineID string
		if o.LineID != nil {
			qrLineID = *o.LineID
		}
		qLineID := qrLineID
		if qLineID != "" {
			if err := r.SetQueryParam("lineId", qLineID); err != nil {
				return err
			}
		}

	}

	// path param toStopPointId
	if err := r.SetPathParam("toStopPointId", o.ToStopPointID); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

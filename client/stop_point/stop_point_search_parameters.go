// Code generated by go-swagger; DO NOT EDIT.

package stop_point

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewStopPointSearchParams creates a new StopPointSearchParams object
// with the default values initialized.
func NewStopPointSearchParams() *StopPointSearchParams {
	var ()
	return &StopPointSearchParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewStopPointSearchParamsWithTimeout creates a new StopPointSearchParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewStopPointSearchParamsWithTimeout(timeout time.Duration) *StopPointSearchParams {
	var ()
	return &StopPointSearchParams{

		timeout: timeout,
	}
}

// NewStopPointSearchParamsWithContext creates a new StopPointSearchParams object
// with the default values initialized, and the ability to set a context for a request
func NewStopPointSearchParamsWithContext(ctx context.Context) *StopPointSearchParams {
	var ()
	return &StopPointSearchParams{

		Context: ctx,
	}
}

// NewStopPointSearchParamsWithHTTPClient creates a new StopPointSearchParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewStopPointSearchParamsWithHTTPClient(client *http.Client) *StopPointSearchParams {
	var ()
	return &StopPointSearchParams{
		HTTPClient: client,
	}
}

/*StopPointSearchParams contains all the parameters to send to the API endpoint
for the stop point search operation typically these are written to a http.Request
*/
type StopPointSearchParams struct {

	/*FaresOnly
	  True to only return stations in that have Fares data available for single fares to another station.

	*/
	FaresOnly *bool
	/*IncludeHubs
	  If true, returns results including HUBs.

	*/
	IncludeHubs *bool
	/*Lines
	  An optional, parameter separated list of the lines to filter by

	*/
	Lines []string
	/*MaxResults
	  An optional result limit, defaulting to and with a maximum of 50. Since children of the stop point heirarchy are returned for matches,
	            it is possible that the flattened result set will contain more than 50 items.

	*/
	MaxResults *int32
	/*Modes
	  An optional, parameter separated list of the modes to filter by

	*/
	Modes []string
	/*Query
	  The query string, case-insensitive. Leading and trailing wildcards are applied automatically.

	*/
	Query string
	/*TflOperatedNationalRailStationsOnly
	  If the national-rail mode is included, this flag will filter the national rail stations so that only those operated by TfL are returned

	*/
	TflOperatedNationalRailStationsOnly *bool

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the stop point search params
func (o *StopPointSearchParams) WithTimeout(timeout time.Duration) *StopPointSearchParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the stop point search params
func (o *StopPointSearchParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the stop point search params
func (o *StopPointSearchParams) WithContext(ctx context.Context) *StopPointSearchParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the stop point search params
func (o *StopPointSearchParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the stop point search params
func (o *StopPointSearchParams) WithHTTPClient(client *http.Client) *StopPointSearchParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the stop point search params
func (o *StopPointSearchParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithFaresOnly adds the faresOnly to the stop point search params
func (o *StopPointSearchParams) WithFaresOnly(faresOnly *bool) *StopPointSearchParams {
	o.SetFaresOnly(faresOnly)
	return o
}

// SetFaresOnly adds the faresOnly to the stop point search params
func (o *StopPointSearchParams) SetFaresOnly(faresOnly *bool) {
	o.FaresOnly = faresOnly
}

// WithIncludeHubs adds the includeHubs to the stop point search params
func (o *StopPointSearchParams) WithIncludeHubs(includeHubs *bool) *StopPointSearchParams {
	o.SetIncludeHubs(includeHubs)
	return o
}

// SetIncludeHubs adds the includeHubs to the stop point search params
func (o *StopPointSearchParams) SetIncludeHubs(includeHubs *bool) {
	o.IncludeHubs = includeHubs
}

// WithLines adds the lines to the stop point search params
func (o *StopPointSearchParams) WithLines(lines []string) *StopPointSearchParams {
	o.SetLines(lines)
	return o
}

// SetLines adds the lines to the stop point search params
func (o *StopPointSearchParams) SetLines(lines []string) {
	o.Lines = lines
}

// WithMaxResults adds the maxResults to the stop point search params
func (o *StopPointSearchParams) WithMaxResults(maxResults *int32) *StopPointSearchParams {
	o.SetMaxResults(maxResults)
	return o
}

// SetMaxResults adds the maxResults to the stop point search params
func (o *StopPointSearchParams) SetMaxResults(maxResults *int32) {
	o.MaxResults = maxResults
}

// WithModes adds the modes to the stop point search params
func (o *StopPointSearchParams) WithModes(modes []string) *StopPointSearchParams {
	o.SetModes(modes)
	return o
}

// SetModes adds the modes to the stop point search params
func (o *StopPointSearchParams) SetModes(modes []string) {
	o.Modes = modes
}

// WithQuery adds the query to the stop point search params
func (o *StopPointSearchParams) WithQuery(query string) *StopPointSearchParams {
	o.SetQuery(query)
	return o
}

// SetQuery adds the query to the stop point search params
func (o *StopPointSearchParams) SetQuery(query string) {
	o.Query = query
}

// WithTflOperatedNationalRailStationsOnly adds the tflOperatedNationalRailStationsOnly to the stop point search params
func (o *StopPointSearchParams) WithTflOperatedNationalRailStationsOnly(tflOperatedNationalRailStationsOnly *bool) *StopPointSearchParams {
	o.SetTflOperatedNationalRailStationsOnly(tflOperatedNationalRailStationsOnly)
	return o
}

// SetTflOperatedNationalRailStationsOnly adds the tflOperatedNationalRailStationsOnly to the stop point search params
func (o *StopPointSearchParams) SetTflOperatedNationalRailStationsOnly(tflOperatedNationalRailStationsOnly *bool) {
	o.TflOperatedNationalRailStationsOnly = tflOperatedNationalRailStationsOnly
}

// WriteToRequest writes these params to a swagger request
func (o *StopPointSearchParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.FaresOnly != nil {

		// query param faresOnly
		var qrFaresOnly bool
		if o.FaresOnly != nil {
			qrFaresOnly = *o.FaresOnly
		}
		qFaresOnly := swag.FormatBool(qrFaresOnly)
		if qFaresOnly != "" {
			if err := r.SetQueryParam("faresOnly", qFaresOnly); err != nil {
				return err
			}
		}

	}

	if o.IncludeHubs != nil {

		// query param includeHubs
		var qrIncludeHubs bool
		if o.IncludeHubs != nil {
			qrIncludeHubs = *o.IncludeHubs
		}
		qIncludeHubs := swag.FormatBool(qrIncludeHubs)
		if qIncludeHubs != "" {
			if err := r.SetQueryParam("includeHubs", qIncludeHubs); err != nil {
				return err
			}
		}

	}

	valuesLines := o.Lines

	joinedLines := swag.JoinByFormat(valuesLines, "multi")
	// query array param lines
	if err := r.SetQueryParam("lines", joinedLines...); err != nil {
		return err
	}

	if o.MaxResults != nil {

		// query param maxResults
		var qrMaxResults int32
		if o.MaxResults != nil {
			qrMaxResults = *o.MaxResults
		}
		qMaxResults := swag.FormatInt32(qrMaxResults)
		if qMaxResults != "" {
			if err := r.SetQueryParam("maxResults", qMaxResults); err != nil {
				return err
			}
		}

	}

	valuesModes := o.Modes

	joinedModes := swag.JoinByFormat(valuesModes, "multi")
	// query array param modes
	if err := r.SetQueryParam("modes", joinedModes...); err != nil {
		return err
	}

	// path param query
	if err := r.SetPathParam("query", o.Query); err != nil {
		return err
	}

	if o.TflOperatedNationalRailStationsOnly != nil {

		// query param tflOperatedNationalRailStationsOnly
		var qrTflOperatedNationalRailStationsOnly bool
		if o.TflOperatedNationalRailStationsOnly != nil {
			qrTflOperatedNationalRailStationsOnly = *o.TflOperatedNationalRailStationsOnly
		}
		qTflOperatedNationalRailStationsOnly := swag.FormatBool(qrTflOperatedNationalRailStationsOnly)
		if qTflOperatedNationalRailStationsOnly != "" {
			if err := r.SetQueryParam("tflOperatedNationalRailStationsOnly", qTflOperatedNationalRailStationsOnly); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// Code generated by go-swagger; DO NOT EDIT.

package stop_point

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewStopPointDisruptionByModeParams creates a new StopPointDisruptionByModeParams object
// with the default values initialized.
func NewStopPointDisruptionByModeParams() *StopPointDisruptionByModeParams {
	var ()
	return &StopPointDisruptionByModeParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewStopPointDisruptionByModeParamsWithTimeout creates a new StopPointDisruptionByModeParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewStopPointDisruptionByModeParamsWithTimeout(timeout time.Duration) *StopPointDisruptionByModeParams {
	var ()
	return &StopPointDisruptionByModeParams{

		timeout: timeout,
	}
}

// NewStopPointDisruptionByModeParamsWithContext creates a new StopPointDisruptionByModeParams object
// with the default values initialized, and the ability to set a context for a request
func NewStopPointDisruptionByModeParamsWithContext(ctx context.Context) *StopPointDisruptionByModeParams {
	var ()
	return &StopPointDisruptionByModeParams{

		Context: ctx,
	}
}

// NewStopPointDisruptionByModeParamsWithHTTPClient creates a new StopPointDisruptionByModeParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewStopPointDisruptionByModeParamsWithHTTPClient(client *http.Client) *StopPointDisruptionByModeParams {
	var ()
	return &StopPointDisruptionByModeParams{
		HTTPClient: client,
	}
}

/*StopPointDisruptionByModeParams contains all the parameters to send to the API endpoint
for the stop point disruption by mode operation typically these are written to a http.Request
*/
type StopPointDisruptionByModeParams struct {

	/*IncludeRouteBlockedStops*/
	IncludeRouteBlockedStops *bool
	/*Modes
	  A comma-seperated list of modes e.g. tube,dlr

	*/
	Modes []string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the stop point disruption by mode params
func (o *StopPointDisruptionByModeParams) WithTimeout(timeout time.Duration) *StopPointDisruptionByModeParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the stop point disruption by mode params
func (o *StopPointDisruptionByModeParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the stop point disruption by mode params
func (o *StopPointDisruptionByModeParams) WithContext(ctx context.Context) *StopPointDisruptionByModeParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the stop point disruption by mode params
func (o *StopPointDisruptionByModeParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the stop point disruption by mode params
func (o *StopPointDisruptionByModeParams) WithHTTPClient(client *http.Client) *StopPointDisruptionByModeParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the stop point disruption by mode params
func (o *StopPointDisruptionByModeParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithIncludeRouteBlockedStops adds the includeRouteBlockedStops to the stop point disruption by mode params
func (o *StopPointDisruptionByModeParams) WithIncludeRouteBlockedStops(includeRouteBlockedStops *bool) *StopPointDisruptionByModeParams {
	o.SetIncludeRouteBlockedStops(includeRouteBlockedStops)
	return o
}

// SetIncludeRouteBlockedStops adds the includeRouteBlockedStops to the stop point disruption by mode params
func (o *StopPointDisruptionByModeParams) SetIncludeRouteBlockedStops(includeRouteBlockedStops *bool) {
	o.IncludeRouteBlockedStops = includeRouteBlockedStops
}

// WithModes adds the modes to the stop point disruption by mode params
func (o *StopPointDisruptionByModeParams) WithModes(modes []string) *StopPointDisruptionByModeParams {
	o.SetModes(modes)
	return o
}

// SetModes adds the modes to the stop point disruption by mode params
func (o *StopPointDisruptionByModeParams) SetModes(modes []string) {
	o.Modes = modes
}

// WriteToRequest writes these params to a swagger request
func (o *StopPointDisruptionByModeParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.IncludeRouteBlockedStops != nil {

		// query param includeRouteBlockedStops
		var qrIncludeRouteBlockedStops bool
		if o.IncludeRouteBlockedStops != nil {
			qrIncludeRouteBlockedStops = *o.IncludeRouteBlockedStops
		}
		qIncludeRouteBlockedStops := swag.FormatBool(qrIncludeRouteBlockedStops)
		if qIncludeRouteBlockedStops != "" {
			if err := r.SetQueryParam("includeRouteBlockedStops", qIncludeRouteBlockedStops); err != nil {
				return err
			}
		}

	}

	valuesModes := o.Modes

	joinedModes := swag.JoinByFormat(valuesModes, "")
	// path array param modes
	// SetPathParam does not support variadric arguments, since we used JoinByFormat
	// we can send the first item in the array as it's all the items of the previous
	// array joined together
	if len(joinedModes) > 0 {
		if err := r.SetPathParam("modes", joinedModes[0]); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// Code generated by go-swagger; DO NOT EDIT.

package stop_point

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"
)

// NewStopPointGetBySmsParams creates a new StopPointGetBySmsParams object
// with the default values initialized.
func NewStopPointGetBySmsParams() *StopPointGetBySmsParams {
	var ()
	return &StopPointGetBySmsParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewStopPointGetBySmsParamsWithTimeout creates a new StopPointGetBySmsParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewStopPointGetBySmsParamsWithTimeout(timeout time.Duration) *StopPointGetBySmsParams {
	var ()
	return &StopPointGetBySmsParams{

		timeout: timeout,
	}
}

// NewStopPointGetBySmsParamsWithContext creates a new StopPointGetBySmsParams object
// with the default values initialized, and the ability to set a context for a request
func NewStopPointGetBySmsParamsWithContext(ctx context.Context) *StopPointGetBySmsParams {
	var ()
	return &StopPointGetBySmsParams{

		Context: ctx,
	}
}

// NewStopPointGetBySmsParamsWithHTTPClient creates a new StopPointGetBySmsParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewStopPointGetBySmsParamsWithHTTPClient(client *http.Client) *StopPointGetBySmsParams {
	var ()
	return &StopPointGetBySmsParams{
		HTTPClient: client,
	}
}

/*StopPointGetBySmsParams contains all the parameters to send to the API endpoint
for the stop point get by sms operation typically these are written to a http.Request
*/
type StopPointGetBySmsParams struct {

	/*ID
	  A 5-digit Countdown Bus Stop Code e.g. 73241, 50435, 56334.

	*/
	ID string
	/*Output
	  If set to "web", a 302 redirect to relevant website bus stop page is returned. Valid values are : web. All other values are ignored.

	*/
	Output *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the stop point get by sms params
func (o *StopPointGetBySmsParams) WithTimeout(timeout time.Duration) *StopPointGetBySmsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the stop point get by sms params
func (o *StopPointGetBySmsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the stop point get by sms params
func (o *StopPointGetBySmsParams) WithContext(ctx context.Context) *StopPointGetBySmsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the stop point get by sms params
func (o *StopPointGetBySmsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the stop point get by sms params
func (o *StopPointGetBySmsParams) WithHTTPClient(client *http.Client) *StopPointGetBySmsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the stop point get by sms params
func (o *StopPointGetBySmsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithID adds the id to the stop point get by sms params
func (o *StopPointGetBySmsParams) WithID(id string) *StopPointGetBySmsParams {
	o.SetID(id)
	return o
}

// SetID adds the id to the stop point get by sms params
func (o *StopPointGetBySmsParams) SetID(id string) {
	o.ID = id
}

// WithOutput adds the output to the stop point get by sms params
func (o *StopPointGetBySmsParams) WithOutput(output *string) *StopPointGetBySmsParams {
	o.SetOutput(output)
	return o
}

// SetOutput adds the output to the stop point get by sms params
func (o *StopPointGetBySmsParams) SetOutput(output *string) {
	o.Output = output
}

// WriteToRequest writes these params to a swagger request
func (o *StopPointGetBySmsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param id
	if err := r.SetPathParam("id", o.ID); err != nil {
		return err
	}

	if o.Output != nil {

		// query param output
		var qrOutput string
		if o.Output != nil {
			qrOutput = *o.Output
		}
		qOutput := qrOutput
		if qOutput != "" {
			if err := r.SetQueryParam("output", qOutput); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

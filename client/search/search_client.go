// Code generated by go-swagger; DO NOT EDIT.

package search

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new search API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for search API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
SearchBusSchedules searches the bus schedules folder on s3 for a given bus number
*/
func (a *Client) SearchBusSchedules(params *SearchBusSchedulesParams) (*SearchBusSchedulesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSearchBusSchedulesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Search_BusSchedules",
		Method:             "GET",
		PathPattern:        "/Search/BusSchedules",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SearchBusSchedulesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SearchBusSchedulesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Search_BusSchedules: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
SearchGet searches the site for occurrences of the query string the maximum number of results returned is equal to the maximum page size of 100 to return subsequent pages use the paginated overload
*/
func (a *Client) SearchGet(params *SearchGetParams) (*SearchGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSearchGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Search_Get",
		Method:             "GET",
		PathPattern:        "/Search",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SearchGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SearchGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Search_Get: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
SearchMetaCategories gets the available search categories
*/
func (a *Client) SearchMetaCategories(params *SearchMetaCategoriesParams) (*SearchMetaCategoriesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSearchMetaCategoriesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Search_MetaCategories",
		Method:             "GET",
		PathPattern:        "/Search/Meta/Categories",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SearchMetaCategoriesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SearchMetaCategoriesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Search_MetaCategories: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
SearchMetaSearchProviders gets the available search provider names
*/
func (a *Client) SearchMetaSearchProviders(params *SearchMetaSearchProvidersParams) (*SearchMetaSearchProvidersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSearchMetaSearchProvidersParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Search_MetaSearchProviders",
		Method:             "GET",
		PathPattern:        "/Search/Meta/SearchProviders",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SearchMetaSearchProvidersReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SearchMetaSearchProvidersOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Search_MetaSearchProviders: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
SearchMetaSorts gets the available sorting options
*/
func (a *Client) SearchMetaSorts(params *SearchMetaSortsParams) (*SearchMetaSortsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSearchMetaSortsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Search_MetaSorts",
		Method:             "GET",
		PathPattern:        "/Search/Meta/Sorts",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SearchMetaSortsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SearchMetaSortsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Search_MetaSorts: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}

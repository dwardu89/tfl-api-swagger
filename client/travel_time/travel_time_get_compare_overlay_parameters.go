// Code generated by go-swagger; DO NOT EDIT.

package travel_time

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewTravelTimeGetCompareOverlayParams creates a new TravelTimeGetCompareOverlayParams object
// with the default values initialized.
func NewTravelTimeGetCompareOverlayParams() *TravelTimeGetCompareOverlayParams {
	var ()
	return &TravelTimeGetCompareOverlayParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewTravelTimeGetCompareOverlayParamsWithTimeout creates a new TravelTimeGetCompareOverlayParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewTravelTimeGetCompareOverlayParamsWithTimeout(timeout time.Duration) *TravelTimeGetCompareOverlayParams {
	var ()
	return &TravelTimeGetCompareOverlayParams{

		timeout: timeout,
	}
}

// NewTravelTimeGetCompareOverlayParamsWithContext creates a new TravelTimeGetCompareOverlayParams object
// with the default values initialized, and the ability to set a context for a request
func NewTravelTimeGetCompareOverlayParamsWithContext(ctx context.Context) *TravelTimeGetCompareOverlayParams {
	var ()
	return &TravelTimeGetCompareOverlayParams{

		Context: ctx,
	}
}

// NewTravelTimeGetCompareOverlayParamsWithHTTPClient creates a new TravelTimeGetCompareOverlayParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewTravelTimeGetCompareOverlayParamsWithHTTPClient(client *http.Client) *TravelTimeGetCompareOverlayParams {
	var ()
	return &TravelTimeGetCompareOverlayParams{
		HTTPClient: client,
	}
}

/*TravelTimeGetCompareOverlayParams contains all the parameters to send to the API endpoint
for the travel time get compare overlay operation typically these are written to a http.Request
*/
type TravelTimeGetCompareOverlayParams struct {

	/*CompareType*/
	CompareType string
	/*CompareValue*/
	CompareValue string
	/*Direction
	  The direction of travel.

	*/
	Direction string
	/*Height
	  The height of the requested overlay.

	*/
	Height int32
	/*MapCenterLat
	  The map center latitude.

	*/
	MapCenterLat float64
	/*MapCenterLon
	  The map center longitude.

	*/
	MapCenterLon float64
	/*ModeID
	  The id of the mode.

	*/
	ModeID string
	/*PinLat
	  The latitude of the pin.

	*/
	PinLat float64
	/*PinLon
	  The longitude of the pin.

	*/
	PinLon float64
	/*ScenarioTitle
	  The title of the scenario.

	*/
	ScenarioTitle string
	/*TimeOfDayID
	  The id for the time of day (AM/INTER/PM)

	*/
	TimeOfDayID string
	/*TravelTimeInterval
	  The total minutes between the travel time bands

	*/
	TravelTimeInterval int32
	/*Width
	  The width of the requested overlay.

	*/
	Width int32
	/*Z
	  The zoom level.

	*/
	Z int32

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the travel time get compare overlay params
func (o *TravelTimeGetCompareOverlayParams) WithTimeout(timeout time.Duration) *TravelTimeGetCompareOverlayParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the travel time get compare overlay params
func (o *TravelTimeGetCompareOverlayParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the travel time get compare overlay params
func (o *TravelTimeGetCompareOverlayParams) WithContext(ctx context.Context) *TravelTimeGetCompareOverlayParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the travel time get compare overlay params
func (o *TravelTimeGetCompareOverlayParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the travel time get compare overlay params
func (o *TravelTimeGetCompareOverlayParams) WithHTTPClient(client *http.Client) *TravelTimeGetCompareOverlayParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the travel time get compare overlay params
func (o *TravelTimeGetCompareOverlayParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithCompareType adds the compareType to the travel time get compare overlay params
func (o *TravelTimeGetCompareOverlayParams) WithCompareType(compareType string) *TravelTimeGetCompareOverlayParams {
	o.SetCompareType(compareType)
	return o
}

// SetCompareType adds the compareType to the travel time get compare overlay params
func (o *TravelTimeGetCompareOverlayParams) SetCompareType(compareType string) {
	o.CompareType = compareType
}

// WithCompareValue adds the compareValue to the travel time get compare overlay params
func (o *TravelTimeGetCompareOverlayParams) WithCompareValue(compareValue string) *TravelTimeGetCompareOverlayParams {
	o.SetCompareValue(compareValue)
	return o
}

// SetCompareValue adds the compareValue to the travel time get compare overlay params
func (o *TravelTimeGetCompareOverlayParams) SetCompareValue(compareValue string) {
	o.CompareValue = compareValue
}

// WithDirection adds the direction to the travel time get compare overlay params
func (o *TravelTimeGetCompareOverlayParams) WithDirection(direction string) *TravelTimeGetCompareOverlayParams {
	o.SetDirection(direction)
	return o
}

// SetDirection adds the direction to the travel time get compare overlay params
func (o *TravelTimeGetCompareOverlayParams) SetDirection(direction string) {
	o.Direction = direction
}

// WithHeight adds the height to the travel time get compare overlay params
func (o *TravelTimeGetCompareOverlayParams) WithHeight(height int32) *TravelTimeGetCompareOverlayParams {
	o.SetHeight(height)
	return o
}

// SetHeight adds the height to the travel time get compare overlay params
func (o *TravelTimeGetCompareOverlayParams) SetHeight(height int32) {
	o.Height = height
}

// WithMapCenterLat adds the mapCenterLat to the travel time get compare overlay params
func (o *TravelTimeGetCompareOverlayParams) WithMapCenterLat(mapCenterLat float64) *TravelTimeGetCompareOverlayParams {
	o.SetMapCenterLat(mapCenterLat)
	return o
}

// SetMapCenterLat adds the mapCenterLat to the travel time get compare overlay params
func (o *TravelTimeGetCompareOverlayParams) SetMapCenterLat(mapCenterLat float64) {
	o.MapCenterLat = mapCenterLat
}

// WithMapCenterLon adds the mapCenterLon to the travel time get compare overlay params
func (o *TravelTimeGetCompareOverlayParams) WithMapCenterLon(mapCenterLon float64) *TravelTimeGetCompareOverlayParams {
	o.SetMapCenterLon(mapCenterLon)
	return o
}

// SetMapCenterLon adds the mapCenterLon to the travel time get compare overlay params
func (o *TravelTimeGetCompareOverlayParams) SetMapCenterLon(mapCenterLon float64) {
	o.MapCenterLon = mapCenterLon
}

// WithModeID adds the modeID to the travel time get compare overlay params
func (o *TravelTimeGetCompareOverlayParams) WithModeID(modeID string) *TravelTimeGetCompareOverlayParams {
	o.SetModeID(modeID)
	return o
}

// SetModeID adds the modeId to the travel time get compare overlay params
func (o *TravelTimeGetCompareOverlayParams) SetModeID(modeID string) {
	o.ModeID = modeID
}

// WithPinLat adds the pinLat to the travel time get compare overlay params
func (o *TravelTimeGetCompareOverlayParams) WithPinLat(pinLat float64) *TravelTimeGetCompareOverlayParams {
	o.SetPinLat(pinLat)
	return o
}

// SetPinLat adds the pinLat to the travel time get compare overlay params
func (o *TravelTimeGetCompareOverlayParams) SetPinLat(pinLat float64) {
	o.PinLat = pinLat
}

// WithPinLon adds the pinLon to the travel time get compare overlay params
func (o *TravelTimeGetCompareOverlayParams) WithPinLon(pinLon float64) *TravelTimeGetCompareOverlayParams {
	o.SetPinLon(pinLon)
	return o
}

// SetPinLon adds the pinLon to the travel time get compare overlay params
func (o *TravelTimeGetCompareOverlayParams) SetPinLon(pinLon float64) {
	o.PinLon = pinLon
}

// WithScenarioTitle adds the scenarioTitle to the travel time get compare overlay params
func (o *TravelTimeGetCompareOverlayParams) WithScenarioTitle(scenarioTitle string) *TravelTimeGetCompareOverlayParams {
	o.SetScenarioTitle(scenarioTitle)
	return o
}

// SetScenarioTitle adds the scenarioTitle to the travel time get compare overlay params
func (o *TravelTimeGetCompareOverlayParams) SetScenarioTitle(scenarioTitle string) {
	o.ScenarioTitle = scenarioTitle
}

// WithTimeOfDayID adds the timeOfDayID to the travel time get compare overlay params
func (o *TravelTimeGetCompareOverlayParams) WithTimeOfDayID(timeOfDayID string) *TravelTimeGetCompareOverlayParams {
	o.SetTimeOfDayID(timeOfDayID)
	return o
}

// SetTimeOfDayID adds the timeOfDayId to the travel time get compare overlay params
func (o *TravelTimeGetCompareOverlayParams) SetTimeOfDayID(timeOfDayID string) {
	o.TimeOfDayID = timeOfDayID
}

// WithTravelTimeInterval adds the travelTimeInterval to the travel time get compare overlay params
func (o *TravelTimeGetCompareOverlayParams) WithTravelTimeInterval(travelTimeInterval int32) *TravelTimeGetCompareOverlayParams {
	o.SetTravelTimeInterval(travelTimeInterval)
	return o
}

// SetTravelTimeInterval adds the travelTimeInterval to the travel time get compare overlay params
func (o *TravelTimeGetCompareOverlayParams) SetTravelTimeInterval(travelTimeInterval int32) {
	o.TravelTimeInterval = travelTimeInterval
}

// WithWidth adds the width to the travel time get compare overlay params
func (o *TravelTimeGetCompareOverlayParams) WithWidth(width int32) *TravelTimeGetCompareOverlayParams {
	o.SetWidth(width)
	return o
}

// SetWidth adds the width to the travel time get compare overlay params
func (o *TravelTimeGetCompareOverlayParams) SetWidth(width int32) {
	o.Width = width
}

// WithZ adds the z to the travel time get compare overlay params
func (o *TravelTimeGetCompareOverlayParams) WithZ(z int32) *TravelTimeGetCompareOverlayParams {
	o.SetZ(z)
	return o
}

// SetZ adds the z to the travel time get compare overlay params
func (o *TravelTimeGetCompareOverlayParams) SetZ(z int32) {
	o.Z = z
}

// WriteToRequest writes these params to a swagger request
func (o *TravelTimeGetCompareOverlayParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// query param compareType
	qrCompareType := o.CompareType
	qCompareType := qrCompareType
	if qCompareType != "" {
		if err := r.SetQueryParam("compareType", qCompareType); err != nil {
			return err
		}
	}

	// query param compareValue
	qrCompareValue := o.CompareValue
	qCompareValue := qrCompareValue
	if qCompareValue != "" {
		if err := r.SetQueryParam("compareValue", qCompareValue); err != nil {
			return err
		}
	}

	// query param direction
	qrDirection := o.Direction
	qDirection := qrDirection
	if qDirection != "" {
		if err := r.SetQueryParam("direction", qDirection); err != nil {
			return err
		}
	}

	// path param height
	if err := r.SetPathParam("height", swag.FormatInt32(o.Height)); err != nil {
		return err
	}

	// path param mapCenterLat
	if err := r.SetPathParam("mapCenterLat", swag.FormatFloat64(o.MapCenterLat)); err != nil {
		return err
	}

	// path param mapCenterLon
	if err := r.SetPathParam("mapCenterLon", swag.FormatFloat64(o.MapCenterLon)); err != nil {
		return err
	}

	// query param modeId
	qrModeID := o.ModeID
	qModeID := qrModeID
	if qModeID != "" {
		if err := r.SetQueryParam("modeId", qModeID); err != nil {
			return err
		}
	}

	// path param pinLat
	if err := r.SetPathParam("pinLat", swag.FormatFloat64(o.PinLat)); err != nil {
		return err
	}

	// path param pinLon
	if err := r.SetPathParam("pinLon", swag.FormatFloat64(o.PinLon)); err != nil {
		return err
	}

	// query param scenarioTitle
	qrScenarioTitle := o.ScenarioTitle
	qScenarioTitle := qrScenarioTitle
	if qScenarioTitle != "" {
		if err := r.SetQueryParam("scenarioTitle", qScenarioTitle); err != nil {
			return err
		}
	}

	// query param timeOfDayId
	qrTimeOfDayID := o.TimeOfDayID
	qTimeOfDayID := qrTimeOfDayID
	if qTimeOfDayID != "" {
		if err := r.SetQueryParam("timeOfDayId", qTimeOfDayID); err != nil {
			return err
		}
	}

	// query param travelTimeInterval
	qrTravelTimeInterval := o.TravelTimeInterval
	qTravelTimeInterval := swag.FormatInt32(qrTravelTimeInterval)
	if qTravelTimeInterval != "" {
		if err := r.SetQueryParam("travelTimeInterval", qTravelTimeInterval); err != nil {
			return err
		}
	}

	// path param width
	if err := r.SetPathParam("width", swag.FormatInt32(o.Width)); err != nil {
		return err
	}

	// path param z
	if err := r.SetPathParam("z", swag.FormatInt32(o.Z)); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

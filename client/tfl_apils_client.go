// Code generated by go-swagger; DO NOT EDIT.

package client

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"
	httptransport "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/dwardu89/tfl-api-swagger/client/accident_stats"
	"github.com/dwardu89/tfl-api-swagger/client/air_quality"
	"github.com/dwardu89/tfl-api-swagger/client/bike_point"
	"github.com/dwardu89/tfl-api-swagger/client/cabwise"
	"github.com/dwardu89/tfl-api-swagger/client/journey"
	"github.com/dwardu89/tfl-api-swagger/client/line"
	"github.com/dwardu89/tfl-api-swagger/client/mode"
	"github.com/dwardu89/tfl-api-swagger/client/occupancy"
	"github.com/dwardu89/tfl-api-swagger/client/place"
	"github.com/dwardu89/tfl-api-swagger/client/road"
	"github.com/dwardu89/tfl-api-swagger/client/search"
	"github.com/dwardu89/tfl-api-swagger/client/stop_point"
	"github.com/dwardu89/tfl-api-swagger/client/travel_time"
	"github.com/dwardu89/tfl-api-swagger/client/vehicle"
)

// Default tfl apils HTTP client.
var Default = NewHTTPClient(nil)

const (
	// DefaultHost is the default Host
	// found in Meta (info) section of spec file
	DefaultHost string = "api.tfl.gov.uk"
	// DefaultBasePath is the default BasePath
	// found in Meta (info) section of spec file
	DefaultBasePath string = "/"
)

// DefaultSchemes are the default schemes found in Meta (info) section of spec file
var DefaultSchemes = []string{"https"}

// NewHTTPClient creates a new tfl apils HTTP client.
func NewHTTPClient(formats strfmt.Registry) *TflApils {
	return NewHTTPClientWithConfig(formats, nil)
}

// NewHTTPClientWithConfig creates a new tfl apils HTTP client,
// using a customizable transport config.
func NewHTTPClientWithConfig(formats strfmt.Registry, cfg *TransportConfig) *TflApils {
	// ensure nullable parameters have default
	if cfg == nil {
		cfg = DefaultTransportConfig()
	}

	// create transport and client
	transport := httptransport.New(cfg.Host, cfg.BasePath, cfg.Schemes)
	return New(transport, formats)
}

// New creates a new tfl apils client
func New(transport runtime.ClientTransport, formats strfmt.Registry) *TflApils {
	// ensure nullable parameters have default
	if formats == nil {
		formats = strfmt.Default
	}

	cli := new(TflApils)
	cli.Transport = transport

	cli.AccidentStats = accident_stats.New(transport, formats)

	cli.AirQuality = air_quality.New(transport, formats)

	cli.BikePoint = bike_point.New(transport, formats)

	cli.Cabwise = cabwise.New(transport, formats)

	cli.Journey = journey.New(transport, formats)

	cli.Line = line.New(transport, formats)

	cli.Mode = mode.New(transport, formats)

	cli.Occupancy = occupancy.New(transport, formats)

	cli.Place = place.New(transport, formats)

	cli.Road = road.New(transport, formats)

	cli.Search = search.New(transport, formats)

	cli.StopPoint = stop_point.New(transport, formats)

	cli.TravelTime = travel_time.New(transport, formats)

	cli.Vehicle = vehicle.New(transport, formats)

	return cli
}

// DefaultTransportConfig creates a TransportConfig with the
// default settings taken from the meta section of the spec file.
func DefaultTransportConfig() *TransportConfig {
	return &TransportConfig{
		Host:     DefaultHost,
		BasePath: DefaultBasePath,
		Schemes:  DefaultSchemes,
	}
}

// TransportConfig contains the transport related info,
// found in the meta section of the spec file.
type TransportConfig struct {
	Host     string
	BasePath string
	Schemes  []string
}

// WithHost overrides the default host,
// provided by the meta section of the spec file.
func (cfg *TransportConfig) WithHost(host string) *TransportConfig {
	cfg.Host = host
	return cfg
}

// WithBasePath overrides the default basePath,
// provided by the meta section of the spec file.
func (cfg *TransportConfig) WithBasePath(basePath string) *TransportConfig {
	cfg.BasePath = basePath
	return cfg
}

// WithSchemes overrides the default schemes,
// provided by the meta section of the spec file.
func (cfg *TransportConfig) WithSchemes(schemes []string) *TransportConfig {
	cfg.Schemes = schemes
	return cfg
}

// TflApils is a client for tfl apils
type TflApils struct {
	AccidentStats *accident_stats.Client

	AirQuality *air_quality.Client

	BikePoint *bike_point.Client

	Cabwise *cabwise.Client

	Journey *journey.Client

	Line *line.Client

	Mode *mode.Client

	Occupancy *occupancy.Client

	Place *place.Client

	Road *road.Client

	Search *search.Client

	StopPoint *stop_point.Client

	TravelTime *travel_time.Client

	Vehicle *vehicle.Client

	Transport runtime.ClientTransport
}

// SetTransport changes the transport on the client and all its subresources
func (c *TflApils) SetTransport(transport runtime.ClientTransport) {
	c.Transport = transport

	c.AccidentStats.SetTransport(transport)

	c.AirQuality.SetTransport(transport)

	c.BikePoint.SetTransport(transport)

	c.Cabwise.SetTransport(transport)

	c.Journey.SetTransport(transport)

	c.Line.SetTransport(transport)

	c.Mode.SetTransport(transport)

	c.Occupancy.SetTransport(transport)

	c.Place.SetTransport(transport)

	c.Road.SetTransport(transport)

	c.Search.SetTransport(transport)

	c.StopPoint.SetTransport(transport)

	c.TravelTime.SetTransport(transport)

	c.Vehicle.SetTransport(transport)

}

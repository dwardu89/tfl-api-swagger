// Code generated by go-swagger; DO NOT EDIT.

package mode

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewModeArrivalsParams creates a new ModeArrivalsParams object
// with the default values initialized.
func NewModeArrivalsParams() *ModeArrivalsParams {
	var ()
	return &ModeArrivalsParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewModeArrivalsParamsWithTimeout creates a new ModeArrivalsParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewModeArrivalsParamsWithTimeout(timeout time.Duration) *ModeArrivalsParams {
	var ()
	return &ModeArrivalsParams{

		timeout: timeout,
	}
}

// NewModeArrivalsParamsWithContext creates a new ModeArrivalsParams object
// with the default values initialized, and the ability to set a context for a request
func NewModeArrivalsParamsWithContext(ctx context.Context) *ModeArrivalsParams {
	var ()
	return &ModeArrivalsParams{

		Context: ctx,
	}
}

// NewModeArrivalsParamsWithHTTPClient creates a new ModeArrivalsParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewModeArrivalsParamsWithHTTPClient(client *http.Client) *ModeArrivalsParams {
	var ()
	return &ModeArrivalsParams{
		HTTPClient: client,
	}
}

/*ModeArrivalsParams contains all the parameters to send to the API endpoint
for the mode arrivals operation typically these are written to a http.Request
*/
type ModeArrivalsParams struct {

	/*Count
	  A number of arrivals to return for each stop, -1 to return all available.

	*/
	Count *int32
	/*Mode
	  A mode name e.g. tube, dlr

	*/
	Mode string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the mode arrivals params
func (o *ModeArrivalsParams) WithTimeout(timeout time.Duration) *ModeArrivalsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the mode arrivals params
func (o *ModeArrivalsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the mode arrivals params
func (o *ModeArrivalsParams) WithContext(ctx context.Context) *ModeArrivalsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the mode arrivals params
func (o *ModeArrivalsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the mode arrivals params
func (o *ModeArrivalsParams) WithHTTPClient(client *http.Client) *ModeArrivalsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the mode arrivals params
func (o *ModeArrivalsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithCount adds the count to the mode arrivals params
func (o *ModeArrivalsParams) WithCount(count *int32) *ModeArrivalsParams {
	o.SetCount(count)
	return o
}

// SetCount adds the count to the mode arrivals params
func (o *ModeArrivalsParams) SetCount(count *int32) {
	o.Count = count
}

// WithMode adds the mode to the mode arrivals params
func (o *ModeArrivalsParams) WithMode(mode string) *ModeArrivalsParams {
	o.SetMode(mode)
	return o
}

// SetMode adds the mode to the mode arrivals params
func (o *ModeArrivalsParams) SetMode(mode string) {
	o.Mode = mode
}

// WriteToRequest writes these params to a swagger request
func (o *ModeArrivalsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Count != nil {

		// query param count
		var qrCount int32
		if o.Count != nil {
			qrCount = *o.Count
		}
		qCount := swag.FormatInt32(qrCount)
		if qCount != "" {
			if err := r.SetQueryParam("count", qCount); err != nil {
				return err
			}
		}

	}

	// path param mode
	if err := r.SetPathParam("mode", o.Mode); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

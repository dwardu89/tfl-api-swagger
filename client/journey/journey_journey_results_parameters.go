// Code generated by go-swagger; DO NOT EDIT.

package journey

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewJourneyJourneyResultsParams creates a new JourneyJourneyResultsParams object
// with the default values initialized.
func NewJourneyJourneyResultsParams() *JourneyJourneyResultsParams {
	var ()
	return &JourneyJourneyResultsParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewJourneyJourneyResultsParamsWithTimeout creates a new JourneyJourneyResultsParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewJourneyJourneyResultsParamsWithTimeout(timeout time.Duration) *JourneyJourneyResultsParams {
	var ()
	return &JourneyJourneyResultsParams{

		timeout: timeout,
	}
}

// NewJourneyJourneyResultsParamsWithContext creates a new JourneyJourneyResultsParams object
// with the default values initialized, and the ability to set a context for a request
func NewJourneyJourneyResultsParamsWithContext(ctx context.Context) *JourneyJourneyResultsParams {
	var ()
	return &JourneyJourneyResultsParams{

		Context: ctx,
	}
}

// NewJourneyJourneyResultsParamsWithHTTPClient creates a new JourneyJourneyResultsParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewJourneyJourneyResultsParamsWithHTTPClient(client *http.Client) *JourneyJourneyResultsParams {
	var ()
	return &JourneyJourneyResultsParams{
		HTTPClient: client,
	}
}

/*JourneyJourneyResultsParams contains all the parameters to send to the API endpoint
for the journey journey results operation typically these are written to a http.Request
*/
type JourneyJourneyResultsParams struct {

	/*AccessibilityPreference
	  The accessibility preference must be a comma separated list eg. "noSolidStairs,noEscalators,noElevators,stepFreeToVehicle,stepFreeToPlatform"

	*/
	AccessibilityPreference []string
	/*Adjustment
	  Time adjustment command. eg possible options: "TripFirst" | "TripLast"

	*/
	Adjustment *string
	/*AlternativeCycle
	  Option to determine whether to return alternative cycling journey

	*/
	AlternativeCycle *bool
	/*AlternativeWalking
	  Option to determine whether to return alternative walking journey

	*/
	AlternativeWalking *bool
	/*ApplyHTMLMarkup
	  Flag to determine whether certain text (e.g. walking instructions) should be output with HTML tags or not.

	*/
	ApplyHTMLMarkup *bool
	/*BikeProficiency
	  A comma separated list of cycling proficiency levels. eg possible options: "easy,moderate,fast"

	*/
	BikeProficiency []string
	/*CyclePreference
	  The cycle preference. eg possible options: "allTheWay" | "leaveAtStation" | "takeOnTransport" | "cycleHire"

	*/
	CyclePreference *string
	/*Date
	  The date must be in yyyyMMdd format

	*/
	Date *string
	/*From
	  Origin of the journey. Can be WGS84 coordinates expressed as "lat,long", a UK postcode, a Naptan (StopPoint) id, an ICS StopId, or a free-text string (will cause disambiguation unless it exactly matches a point of interest name).

	*/
	From string
	/*FromName
	  An optional name to associate with the origin of the journey in the results.

	*/
	FromName *string
	/*JourneyPreference
	  The journey preference eg possible options: "leastinterchange" | "leasttime" | "leastwalking"

	*/
	JourneyPreference *string
	/*MaxTransferMinutes
	  The max walking time in minutes for transfer eg. "120"

	*/
	MaxTransferMinutes *string
	/*MaxWalkingMinutes
	  The max walking time in minutes for journeys eg. "120"

	*/
	MaxWalkingMinutes *string
	/*Mode
	  The mode must be a comma separated list of modes. eg possible options: "public-bus,overground,train,tube,coach,dlr,cablecar,tram,river,walking,cycle"

	*/
	Mode []string
	/*NationalSearch
	  Does the journey cover stops outside London? eg. "nationalSearch=true"

	*/
	NationalSearch *bool
	/*TaxiOnlyTrip
	  A boolean to indicate whether to return one or more taxi journeys. Note, setting this to true will override "useMultiModalCall".

	*/
	TaxiOnlyTrip *bool
	/*Time
	  The time must be in HHmm format

	*/
	Time *string
	/*TimeIs
	  Does the time given relate to arrival or leaving time? Possible options: "departing" | "arriving"

	*/
	TimeIs *string
	/*To
	  Destination of the journey. Can be WGS84 coordinates expressed as "lat,long", a UK postcode, a Naptan (StopPoint) id, an ICS StopId, or a free-text string (will cause disambiguation unless it exactly matches a point of interest name).

	*/
	To string
	/*ToName
	  An optional name to associate with the destination of the journey in the results.

	*/
	ToName *string
	/*UseMultiModalCall
	  A boolean to indicate whether or not to return 3 public transport journeys, a bus journey, a cycle hire journey, a personal cycle journey and a walking journey

	*/
	UseMultiModalCall *bool
	/*Via
	  Travel through point on the journey. Can be WGS84 coordinates expressed as "lat,long", a UK postcode, a Naptan (StopPoint) id, an ICS StopId, or a free-text string (will cause disambiguation unless it exactly matches a point of interest name).

	*/
	Via *string
	/*ViaName
	  An optional name to associate with the via point of the journey in the results.

	*/
	ViaName *string
	/*WalkingOptimization
	  A boolean to indicate whether to optimize journeys using walking

	*/
	WalkingOptimization *bool
	/*WalkingSpeed
	  The walking speed. eg possible options: "slow" | "average" | "fast".

	*/
	WalkingSpeed *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the journey journey results params
func (o *JourneyJourneyResultsParams) WithTimeout(timeout time.Duration) *JourneyJourneyResultsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the journey journey results params
func (o *JourneyJourneyResultsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the journey journey results params
func (o *JourneyJourneyResultsParams) WithContext(ctx context.Context) *JourneyJourneyResultsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the journey journey results params
func (o *JourneyJourneyResultsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the journey journey results params
func (o *JourneyJourneyResultsParams) WithHTTPClient(client *http.Client) *JourneyJourneyResultsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the journey journey results params
func (o *JourneyJourneyResultsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAccessibilityPreference adds the accessibilityPreference to the journey journey results params
func (o *JourneyJourneyResultsParams) WithAccessibilityPreference(accessibilityPreference []string) *JourneyJourneyResultsParams {
	o.SetAccessibilityPreference(accessibilityPreference)
	return o
}

// SetAccessibilityPreference adds the accessibilityPreference to the journey journey results params
func (o *JourneyJourneyResultsParams) SetAccessibilityPreference(accessibilityPreference []string) {
	o.AccessibilityPreference = accessibilityPreference
}

// WithAdjustment adds the adjustment to the journey journey results params
func (o *JourneyJourneyResultsParams) WithAdjustment(adjustment *string) *JourneyJourneyResultsParams {
	o.SetAdjustment(adjustment)
	return o
}

// SetAdjustment adds the adjustment to the journey journey results params
func (o *JourneyJourneyResultsParams) SetAdjustment(adjustment *string) {
	o.Adjustment = adjustment
}

// WithAlternativeCycle adds the alternativeCycle to the journey journey results params
func (o *JourneyJourneyResultsParams) WithAlternativeCycle(alternativeCycle *bool) *JourneyJourneyResultsParams {
	o.SetAlternativeCycle(alternativeCycle)
	return o
}

// SetAlternativeCycle adds the alternativeCycle to the journey journey results params
func (o *JourneyJourneyResultsParams) SetAlternativeCycle(alternativeCycle *bool) {
	o.AlternativeCycle = alternativeCycle
}

// WithAlternativeWalking adds the alternativeWalking to the journey journey results params
func (o *JourneyJourneyResultsParams) WithAlternativeWalking(alternativeWalking *bool) *JourneyJourneyResultsParams {
	o.SetAlternativeWalking(alternativeWalking)
	return o
}

// SetAlternativeWalking adds the alternativeWalking to the journey journey results params
func (o *JourneyJourneyResultsParams) SetAlternativeWalking(alternativeWalking *bool) {
	o.AlternativeWalking = alternativeWalking
}

// WithApplyHTMLMarkup adds the applyHTMLMarkup to the journey journey results params
func (o *JourneyJourneyResultsParams) WithApplyHTMLMarkup(applyHTMLMarkup *bool) *JourneyJourneyResultsParams {
	o.SetApplyHTMLMarkup(applyHTMLMarkup)
	return o
}

// SetApplyHTMLMarkup adds the applyHtmlMarkup to the journey journey results params
func (o *JourneyJourneyResultsParams) SetApplyHTMLMarkup(applyHTMLMarkup *bool) {
	o.ApplyHTMLMarkup = applyHTMLMarkup
}

// WithBikeProficiency adds the bikeProficiency to the journey journey results params
func (o *JourneyJourneyResultsParams) WithBikeProficiency(bikeProficiency []string) *JourneyJourneyResultsParams {
	o.SetBikeProficiency(bikeProficiency)
	return o
}

// SetBikeProficiency adds the bikeProficiency to the journey journey results params
func (o *JourneyJourneyResultsParams) SetBikeProficiency(bikeProficiency []string) {
	o.BikeProficiency = bikeProficiency
}

// WithCyclePreference adds the cyclePreference to the journey journey results params
func (o *JourneyJourneyResultsParams) WithCyclePreference(cyclePreference *string) *JourneyJourneyResultsParams {
	o.SetCyclePreference(cyclePreference)
	return o
}

// SetCyclePreference adds the cyclePreference to the journey journey results params
func (o *JourneyJourneyResultsParams) SetCyclePreference(cyclePreference *string) {
	o.CyclePreference = cyclePreference
}

// WithDate adds the date to the journey journey results params
func (o *JourneyJourneyResultsParams) WithDate(date *string) *JourneyJourneyResultsParams {
	o.SetDate(date)
	return o
}

// SetDate adds the date to the journey journey results params
func (o *JourneyJourneyResultsParams) SetDate(date *string) {
	o.Date = date
}

// WithFrom adds the from to the journey journey results params
func (o *JourneyJourneyResultsParams) WithFrom(from string) *JourneyJourneyResultsParams {
	o.SetFrom(from)
	return o
}

// SetFrom adds the from to the journey journey results params
func (o *JourneyJourneyResultsParams) SetFrom(from string) {
	o.From = from
}

// WithFromName adds the fromName to the journey journey results params
func (o *JourneyJourneyResultsParams) WithFromName(fromName *string) *JourneyJourneyResultsParams {
	o.SetFromName(fromName)
	return o
}

// SetFromName adds the fromName to the journey journey results params
func (o *JourneyJourneyResultsParams) SetFromName(fromName *string) {
	o.FromName = fromName
}

// WithJourneyPreference adds the journeyPreference to the journey journey results params
func (o *JourneyJourneyResultsParams) WithJourneyPreference(journeyPreference *string) *JourneyJourneyResultsParams {
	o.SetJourneyPreference(journeyPreference)
	return o
}

// SetJourneyPreference adds the journeyPreference to the journey journey results params
func (o *JourneyJourneyResultsParams) SetJourneyPreference(journeyPreference *string) {
	o.JourneyPreference = journeyPreference
}

// WithMaxTransferMinutes adds the maxTransferMinutes to the journey journey results params
func (o *JourneyJourneyResultsParams) WithMaxTransferMinutes(maxTransferMinutes *string) *JourneyJourneyResultsParams {
	o.SetMaxTransferMinutes(maxTransferMinutes)
	return o
}

// SetMaxTransferMinutes adds the maxTransferMinutes to the journey journey results params
func (o *JourneyJourneyResultsParams) SetMaxTransferMinutes(maxTransferMinutes *string) {
	o.MaxTransferMinutes = maxTransferMinutes
}

// WithMaxWalkingMinutes adds the maxWalkingMinutes to the journey journey results params
func (o *JourneyJourneyResultsParams) WithMaxWalkingMinutes(maxWalkingMinutes *string) *JourneyJourneyResultsParams {
	o.SetMaxWalkingMinutes(maxWalkingMinutes)
	return o
}

// SetMaxWalkingMinutes adds the maxWalkingMinutes to the journey journey results params
func (o *JourneyJourneyResultsParams) SetMaxWalkingMinutes(maxWalkingMinutes *string) {
	o.MaxWalkingMinutes = maxWalkingMinutes
}

// WithMode adds the mode to the journey journey results params
func (o *JourneyJourneyResultsParams) WithMode(mode []string) *JourneyJourneyResultsParams {
	o.SetMode(mode)
	return o
}

// SetMode adds the mode to the journey journey results params
func (o *JourneyJourneyResultsParams) SetMode(mode []string) {
	o.Mode = mode
}

// WithNationalSearch adds the nationalSearch to the journey journey results params
func (o *JourneyJourneyResultsParams) WithNationalSearch(nationalSearch *bool) *JourneyJourneyResultsParams {
	o.SetNationalSearch(nationalSearch)
	return o
}

// SetNationalSearch adds the nationalSearch to the journey journey results params
func (o *JourneyJourneyResultsParams) SetNationalSearch(nationalSearch *bool) {
	o.NationalSearch = nationalSearch
}

// WithTaxiOnlyTrip adds the taxiOnlyTrip to the journey journey results params
func (o *JourneyJourneyResultsParams) WithTaxiOnlyTrip(taxiOnlyTrip *bool) *JourneyJourneyResultsParams {
	o.SetTaxiOnlyTrip(taxiOnlyTrip)
	return o
}

// SetTaxiOnlyTrip adds the taxiOnlyTrip to the journey journey results params
func (o *JourneyJourneyResultsParams) SetTaxiOnlyTrip(taxiOnlyTrip *bool) {
	o.TaxiOnlyTrip = taxiOnlyTrip
}

// WithTime adds the time to the journey journey results params
func (o *JourneyJourneyResultsParams) WithTime(time *string) *JourneyJourneyResultsParams {
	o.SetTime(time)
	return o
}

// SetTime adds the time to the journey journey results params
func (o *JourneyJourneyResultsParams) SetTime(time *string) {
	o.Time = time
}

// WithTimeIs adds the timeIs to the journey journey results params
func (o *JourneyJourneyResultsParams) WithTimeIs(timeIs *string) *JourneyJourneyResultsParams {
	o.SetTimeIs(timeIs)
	return o
}

// SetTimeIs adds the timeIs to the journey journey results params
func (o *JourneyJourneyResultsParams) SetTimeIs(timeIs *string) {
	o.TimeIs = timeIs
}

// WithTo adds the to to the journey journey results params
func (o *JourneyJourneyResultsParams) WithTo(to string) *JourneyJourneyResultsParams {
	o.SetTo(to)
	return o
}

// SetTo adds the to to the journey journey results params
func (o *JourneyJourneyResultsParams) SetTo(to string) {
	o.To = to
}

// WithToName adds the toName to the journey journey results params
func (o *JourneyJourneyResultsParams) WithToName(toName *string) *JourneyJourneyResultsParams {
	o.SetToName(toName)
	return o
}

// SetToName adds the toName to the journey journey results params
func (o *JourneyJourneyResultsParams) SetToName(toName *string) {
	o.ToName = toName
}

// WithUseMultiModalCall adds the useMultiModalCall to the journey journey results params
func (o *JourneyJourneyResultsParams) WithUseMultiModalCall(useMultiModalCall *bool) *JourneyJourneyResultsParams {
	o.SetUseMultiModalCall(useMultiModalCall)
	return o
}

// SetUseMultiModalCall adds the useMultiModalCall to the journey journey results params
func (o *JourneyJourneyResultsParams) SetUseMultiModalCall(useMultiModalCall *bool) {
	o.UseMultiModalCall = useMultiModalCall
}

// WithVia adds the via to the journey journey results params
func (o *JourneyJourneyResultsParams) WithVia(via *string) *JourneyJourneyResultsParams {
	o.SetVia(via)
	return o
}

// SetVia adds the via to the journey journey results params
func (o *JourneyJourneyResultsParams) SetVia(via *string) {
	o.Via = via
}

// WithViaName adds the viaName to the journey journey results params
func (o *JourneyJourneyResultsParams) WithViaName(viaName *string) *JourneyJourneyResultsParams {
	o.SetViaName(viaName)
	return o
}

// SetViaName adds the viaName to the journey journey results params
func (o *JourneyJourneyResultsParams) SetViaName(viaName *string) {
	o.ViaName = viaName
}

// WithWalkingOptimization adds the walkingOptimization to the journey journey results params
func (o *JourneyJourneyResultsParams) WithWalkingOptimization(walkingOptimization *bool) *JourneyJourneyResultsParams {
	o.SetWalkingOptimization(walkingOptimization)
	return o
}

// SetWalkingOptimization adds the walkingOptimization to the journey journey results params
func (o *JourneyJourneyResultsParams) SetWalkingOptimization(walkingOptimization *bool) {
	o.WalkingOptimization = walkingOptimization
}

// WithWalkingSpeed adds the walkingSpeed to the journey journey results params
func (o *JourneyJourneyResultsParams) WithWalkingSpeed(walkingSpeed *string) *JourneyJourneyResultsParams {
	o.SetWalkingSpeed(walkingSpeed)
	return o
}

// SetWalkingSpeed adds the walkingSpeed to the journey journey results params
func (o *JourneyJourneyResultsParams) SetWalkingSpeed(walkingSpeed *string) {
	o.WalkingSpeed = walkingSpeed
}

// WriteToRequest writes these params to a swagger request
func (o *JourneyJourneyResultsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	valuesAccessibilityPreference := o.AccessibilityPreference

	joinedAccessibilityPreference := swag.JoinByFormat(valuesAccessibilityPreference, "multi")
	// query array param accessibilityPreference
	if err := r.SetQueryParam("accessibilityPreference", joinedAccessibilityPreference...); err != nil {
		return err
	}

	if o.Adjustment != nil {

		// query param adjustment
		var qrAdjustment string
		if o.Adjustment != nil {
			qrAdjustment = *o.Adjustment
		}
		qAdjustment := qrAdjustment
		if qAdjustment != "" {
			if err := r.SetQueryParam("adjustment", qAdjustment); err != nil {
				return err
			}
		}

	}

	if o.AlternativeCycle != nil {

		// query param alternativeCycle
		var qrAlternativeCycle bool
		if o.AlternativeCycle != nil {
			qrAlternativeCycle = *o.AlternativeCycle
		}
		qAlternativeCycle := swag.FormatBool(qrAlternativeCycle)
		if qAlternativeCycle != "" {
			if err := r.SetQueryParam("alternativeCycle", qAlternativeCycle); err != nil {
				return err
			}
		}

	}

	if o.AlternativeWalking != nil {

		// query param alternativeWalking
		var qrAlternativeWalking bool
		if o.AlternativeWalking != nil {
			qrAlternativeWalking = *o.AlternativeWalking
		}
		qAlternativeWalking := swag.FormatBool(qrAlternativeWalking)
		if qAlternativeWalking != "" {
			if err := r.SetQueryParam("alternativeWalking", qAlternativeWalking); err != nil {
				return err
			}
		}

	}

	if o.ApplyHTMLMarkup != nil {

		// query param applyHtmlMarkup
		var qrApplyHTMLMarkup bool
		if o.ApplyHTMLMarkup != nil {
			qrApplyHTMLMarkup = *o.ApplyHTMLMarkup
		}
		qApplyHTMLMarkup := swag.FormatBool(qrApplyHTMLMarkup)
		if qApplyHTMLMarkup != "" {
			if err := r.SetQueryParam("applyHtmlMarkup", qApplyHTMLMarkup); err != nil {
				return err
			}
		}

	}

	valuesBikeProficiency := o.BikeProficiency

	joinedBikeProficiency := swag.JoinByFormat(valuesBikeProficiency, "multi")
	// query array param bikeProficiency
	if err := r.SetQueryParam("bikeProficiency", joinedBikeProficiency...); err != nil {
		return err
	}

	if o.CyclePreference != nil {

		// query param cyclePreference
		var qrCyclePreference string
		if o.CyclePreference != nil {
			qrCyclePreference = *o.CyclePreference
		}
		qCyclePreference := qrCyclePreference
		if qCyclePreference != "" {
			if err := r.SetQueryParam("cyclePreference", qCyclePreference); err != nil {
				return err
			}
		}

	}

	if o.Date != nil {

		// query param date
		var qrDate string
		if o.Date != nil {
			qrDate = *o.Date
		}
		qDate := qrDate
		if qDate != "" {
			if err := r.SetQueryParam("date", qDate); err != nil {
				return err
			}
		}

	}

	// path param from
	if err := r.SetPathParam("from", o.From); err != nil {
		return err
	}

	if o.FromName != nil {

		// query param fromName
		var qrFromName string
		if o.FromName != nil {
			qrFromName = *o.FromName
		}
		qFromName := qrFromName
		if qFromName != "" {
			if err := r.SetQueryParam("fromName", qFromName); err != nil {
				return err
			}
		}

	}

	if o.JourneyPreference != nil {

		// query param journeyPreference
		var qrJourneyPreference string
		if o.JourneyPreference != nil {
			qrJourneyPreference = *o.JourneyPreference
		}
		qJourneyPreference := qrJourneyPreference
		if qJourneyPreference != "" {
			if err := r.SetQueryParam("journeyPreference", qJourneyPreference); err != nil {
				return err
			}
		}

	}

	if o.MaxTransferMinutes != nil {

		// query param maxTransferMinutes
		var qrMaxTransferMinutes string
		if o.MaxTransferMinutes != nil {
			qrMaxTransferMinutes = *o.MaxTransferMinutes
		}
		qMaxTransferMinutes := qrMaxTransferMinutes
		if qMaxTransferMinutes != "" {
			if err := r.SetQueryParam("maxTransferMinutes", qMaxTransferMinutes); err != nil {
				return err
			}
		}

	}

	if o.MaxWalkingMinutes != nil {

		// query param maxWalkingMinutes
		var qrMaxWalkingMinutes string
		if o.MaxWalkingMinutes != nil {
			qrMaxWalkingMinutes = *o.MaxWalkingMinutes
		}
		qMaxWalkingMinutes := qrMaxWalkingMinutes
		if qMaxWalkingMinutes != "" {
			if err := r.SetQueryParam("maxWalkingMinutes", qMaxWalkingMinutes); err != nil {
				return err
			}
		}

	}

	valuesMode := o.Mode

	joinedMode := swag.JoinByFormat(valuesMode, "multi")
	// query array param mode
	if err := r.SetQueryParam("mode", joinedMode...); err != nil {
		return err
	}

	if o.NationalSearch != nil {

		// query param nationalSearch
		var qrNationalSearch bool
		if o.NationalSearch != nil {
			qrNationalSearch = *o.NationalSearch
		}
		qNationalSearch := swag.FormatBool(qrNationalSearch)
		if qNationalSearch != "" {
			if err := r.SetQueryParam("nationalSearch", qNationalSearch); err != nil {
				return err
			}
		}

	}

	if o.TaxiOnlyTrip != nil {

		// query param taxiOnlyTrip
		var qrTaxiOnlyTrip bool
		if o.TaxiOnlyTrip != nil {
			qrTaxiOnlyTrip = *o.TaxiOnlyTrip
		}
		qTaxiOnlyTrip := swag.FormatBool(qrTaxiOnlyTrip)
		if qTaxiOnlyTrip != "" {
			if err := r.SetQueryParam("taxiOnlyTrip", qTaxiOnlyTrip); err != nil {
				return err
			}
		}

	}

	if o.Time != nil {

		// query param time
		var qrTime string
		if o.Time != nil {
			qrTime = *o.Time
		}
		qTime := qrTime
		if qTime != "" {
			if err := r.SetQueryParam("time", qTime); err != nil {
				return err
			}
		}

	}

	if o.TimeIs != nil {

		// query param timeIs
		var qrTimeIs string
		if o.TimeIs != nil {
			qrTimeIs = *o.TimeIs
		}
		qTimeIs := qrTimeIs
		if qTimeIs != "" {
			if err := r.SetQueryParam("timeIs", qTimeIs); err != nil {
				return err
			}
		}

	}

	// path param to
	if err := r.SetPathParam("to", o.To); err != nil {
		return err
	}

	if o.ToName != nil {

		// query param toName
		var qrToName string
		if o.ToName != nil {
			qrToName = *o.ToName
		}
		qToName := qrToName
		if qToName != "" {
			if err := r.SetQueryParam("toName", qToName); err != nil {
				return err
			}
		}

	}

	if o.UseMultiModalCall != nil {

		// query param useMultiModalCall
		var qrUseMultiModalCall bool
		if o.UseMultiModalCall != nil {
			qrUseMultiModalCall = *o.UseMultiModalCall
		}
		qUseMultiModalCall := swag.FormatBool(qrUseMultiModalCall)
		if qUseMultiModalCall != "" {
			if err := r.SetQueryParam("useMultiModalCall", qUseMultiModalCall); err != nil {
				return err
			}
		}

	}

	if o.Via != nil {

		// query param via
		var qrVia string
		if o.Via != nil {
			qrVia = *o.Via
		}
		qVia := qrVia
		if qVia != "" {
			if err := r.SetQueryParam("via", qVia); err != nil {
				return err
			}
		}

	}

	if o.ViaName != nil {

		// query param viaName
		var qrViaName string
		if o.ViaName != nil {
			qrViaName = *o.ViaName
		}
		qViaName := qrViaName
		if qViaName != "" {
			if err := r.SetQueryParam("viaName", qViaName); err != nil {
				return err
			}
		}

	}

	if o.WalkingOptimization != nil {

		// query param walkingOptimization
		var qrWalkingOptimization bool
		if o.WalkingOptimization != nil {
			qrWalkingOptimization = *o.WalkingOptimization
		}
		qWalkingOptimization := swag.FormatBool(qrWalkingOptimization)
		if qWalkingOptimization != "" {
			if err := r.SetQueryParam("walkingOptimization", qWalkingOptimization); err != nil {
				return err
			}
		}

	}

	if o.WalkingSpeed != nil {

		// query param walkingSpeed
		var qrWalkingSpeed string
		if o.WalkingSpeed != nil {
			qrWalkingSpeed = *o.WalkingSpeed
		}
		qWalkingSpeed := qrWalkingSpeed
		if qWalkingSpeed != "" {
			if err := r.SetQueryParam("walkingSpeed", qWalkingSpeed); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

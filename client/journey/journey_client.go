// Code generated by go-swagger; DO NOT EDIT.

package journey

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new journey API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for journey API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
JourneyJourneyResults performs a journey planner search from the parameters specified in simple types
*/
func (a *Client) JourneyJourneyResults(params *JourneyJourneyResultsParams) (*JourneyJourneyResultsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewJourneyJourneyResultsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Journey_JourneyResults",
		Method:             "GET",
		PathPattern:        "/Journey/JourneyResults/{from}/to/{to}",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &JourneyJourneyResultsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*JourneyJourneyResultsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Journey_JourneyResults: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
JourneyMeta gets a list of all of the available journey planner modes
*/
func (a *Client) JourneyMeta(params *JourneyMetaParams) (*JourneyMetaOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewJourneyMetaParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Journey_Meta",
		Method:             "GET",
		PathPattern:        "/Journey/Meta/Modes",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &JourneyMetaReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*JourneyMetaOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Journey_Meta: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}

// Code generated by go-swagger; DO NOT EDIT.

package bike_point

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new bike point API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for bike point API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
BikePointGet gets the bike point with the given id
*/
func (a *Client) BikePointGet(params *BikePointGetParams) (*BikePointGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewBikePointGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "BikePoint_Get",
		Method:             "GET",
		PathPattern:        "/BikePoint/{id}",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &BikePointGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*BikePointGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for BikePoint_Get: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
BikePointGetAll gets all bike point locations the place object has an addtional properties array which contains the nb bikes nb docks and nb spaces numbers which give the status of the bike point a mismatch in these numbers i e nb docks nb bikes nb spaces bang 0 indicates broken docks
*/
func (a *Client) BikePointGetAll(params *BikePointGetAllParams) (*BikePointGetAllOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewBikePointGetAllParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "BikePoint_GetAll",
		Method:             "GET",
		PathPattern:        "/BikePoint",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &BikePointGetAllReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*BikePointGetAllOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for BikePoint_GetAll: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
BikePointSearch searches for bike stations by their name a bike point s name often contains information about the name of the street or nearby landmarks for example note that the search result does not contain the place properties i e the status or occupancy of the bike point to get that information you should retrieve the bike point by its id on bike point id
*/
func (a *Client) BikePointSearch(params *BikePointSearchParams) (*BikePointSearchOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewBikePointSearchParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "BikePoint_Search",
		Method:             "GET",
		PathPattern:        "/BikePoint/Search",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &BikePointSearchReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*BikePointSearchOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for BikePoint_Search: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}

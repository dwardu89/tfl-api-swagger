// Code generated by go-swagger; DO NOT EDIT.

package place

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewPlaceGetByTypeParams creates a new PlaceGetByTypeParams object
// with the default values initialized.
func NewPlaceGetByTypeParams() *PlaceGetByTypeParams {
	var ()
	return &PlaceGetByTypeParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewPlaceGetByTypeParamsWithTimeout creates a new PlaceGetByTypeParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewPlaceGetByTypeParamsWithTimeout(timeout time.Duration) *PlaceGetByTypeParams {
	var ()
	return &PlaceGetByTypeParams{

		timeout: timeout,
	}
}

// NewPlaceGetByTypeParamsWithContext creates a new PlaceGetByTypeParams object
// with the default values initialized, and the ability to set a context for a request
func NewPlaceGetByTypeParamsWithContext(ctx context.Context) *PlaceGetByTypeParams {
	var ()
	return &PlaceGetByTypeParams{

		Context: ctx,
	}
}

// NewPlaceGetByTypeParamsWithHTTPClient creates a new PlaceGetByTypeParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewPlaceGetByTypeParamsWithHTTPClient(client *http.Client) *PlaceGetByTypeParams {
	var ()
	return &PlaceGetByTypeParams{
		HTTPClient: client,
	}
}

/*PlaceGetByTypeParams contains all the parameters to send to the API endpoint
for the place get by type operation typically these are written to a http.Request
*/
type PlaceGetByTypeParams struct {

	/*ActiveOnly
	  An optional parameter to limit the results to active records only (Currently only the 'VariableMessageSign' place type is supported)

	*/
	ActiveOnly *bool
	/*Types
	  A comma-separated list of the types to return. Max. approx 12 types.
	            A valid list of place types can be obtained from the /Place/Meta/placeTypes endpoint.

	*/
	Types []string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the place get by type params
func (o *PlaceGetByTypeParams) WithTimeout(timeout time.Duration) *PlaceGetByTypeParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the place get by type params
func (o *PlaceGetByTypeParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the place get by type params
func (o *PlaceGetByTypeParams) WithContext(ctx context.Context) *PlaceGetByTypeParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the place get by type params
func (o *PlaceGetByTypeParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the place get by type params
func (o *PlaceGetByTypeParams) WithHTTPClient(client *http.Client) *PlaceGetByTypeParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the place get by type params
func (o *PlaceGetByTypeParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithActiveOnly adds the activeOnly to the place get by type params
func (o *PlaceGetByTypeParams) WithActiveOnly(activeOnly *bool) *PlaceGetByTypeParams {
	o.SetActiveOnly(activeOnly)
	return o
}

// SetActiveOnly adds the activeOnly to the place get by type params
func (o *PlaceGetByTypeParams) SetActiveOnly(activeOnly *bool) {
	o.ActiveOnly = activeOnly
}

// WithTypes adds the types to the place get by type params
func (o *PlaceGetByTypeParams) WithTypes(types []string) *PlaceGetByTypeParams {
	o.SetTypes(types)
	return o
}

// SetTypes adds the types to the place get by type params
func (o *PlaceGetByTypeParams) SetTypes(types []string) {
	o.Types = types
}

// WriteToRequest writes these params to a swagger request
func (o *PlaceGetByTypeParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.ActiveOnly != nil {

		// query param activeOnly
		var qrActiveOnly bool
		if o.ActiveOnly != nil {
			qrActiveOnly = *o.ActiveOnly
		}
		qActiveOnly := swag.FormatBool(qrActiveOnly)
		if qActiveOnly != "" {
			if err := r.SetQueryParam("activeOnly", qActiveOnly); err != nil {
				return err
			}
		}

	}

	valuesTypes := o.Types

	joinedTypes := swag.JoinByFormat(valuesTypes, "")
	// path array param types
	// SetPathParam does not support variadric arguments, since we used JoinByFormat
	// we can send the first item in the array as it's all the items of the previous
	// array joined together
	if len(joinedTypes) > 0 {
		if err := r.SetPathParam("types", joinedTypes[0]); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

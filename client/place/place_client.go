// Code generated by go-swagger; DO NOT EDIT.

package place

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new place API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for place API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
PlaceGet gets the place with the given id
*/
func (a *Client) PlaceGet(params *PlaceGetParams) (*PlaceGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPlaceGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Place_Get",
		Method:             "GET",
		PathPattern:        "/Place/{id}",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PlaceGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PlaceGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Place_Get: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PlaceGetAt gets any places of the given type whose geography intersects the given latitude and longitude in practice this means the place must be polygonal e g a borough boundary
*/
func (a *Client) PlaceGetAt(params *PlaceGetAtParams) (*PlaceGetAtOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPlaceGetAtParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Place_GetAt",
		Method:             "GET",
		PathPattern:        "/Place/{type}/At/{Lat}/{Lon}",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PlaceGetAtReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PlaceGetAtOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Place_GetAt: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PlaceGetByGeo gets the places that lie within a geographic region the geographic region of interest can either be specified by using a lat lon geo point and a radius in metres to return places within the locus defined by the lat lon of its centre or alternatively by the use of a bounding box defined by the lat lon of its north west and south east corners optionally filters on type and can strip properties for a smaller payload
*/
func (a *Client) PlaceGetByGeo(params *PlaceGetByGeoParams) (*PlaceGetByGeoOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPlaceGetByGeoParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Place_GetByGeo",
		Method:             "GET",
		PathPattern:        "/Place",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PlaceGetByGeoReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PlaceGetByGeoOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Place_GetByGeo: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PlaceGetByType gets all places of a given type
*/
func (a *Client) PlaceGetByType(params *PlaceGetByTypeParams) (*PlaceGetByTypeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPlaceGetByTypeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Place_GetByType",
		Method:             "GET",
		PathPattern:        "/Place/Type/{types}",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PlaceGetByTypeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PlaceGetByTypeOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Place_GetByType: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PlaceGetOverlay gets the place overlay for a given set of co ordinates and a given width height
*/
func (a *Client) PlaceGetOverlay(params *PlaceGetOverlayParams) (*PlaceGetOverlayOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPlaceGetOverlayParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Place_GetOverlay",
		Method:             "GET",
		PathPattern:        "/Place/{type}/overlay/{z}/{Lat}/{Lon}/{width}/{height}",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PlaceGetOverlayReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PlaceGetOverlayOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Place_GetOverlay: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PlaceGetStreetsByPostCode gets the set of streets associated with a post code
*/
func (a *Client) PlaceGetStreetsByPostCode(params *PlaceGetStreetsByPostCodeParams) (*PlaceGetStreetsByPostCodeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPlaceGetStreetsByPostCodeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Place_GetStreetsByPostCode",
		Method:             "GET",
		PathPattern:        "/Place/Address/Streets/{Postcode}",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PlaceGetStreetsByPostCodeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PlaceGetStreetsByPostCodeOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Place_GetStreetsByPostCode: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PlaceMetaCategories gets a list of all of the available place property categories and keys
*/
func (a *Client) PlaceMetaCategories(params *PlaceMetaCategoriesParams) (*PlaceMetaCategoriesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPlaceMetaCategoriesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Place_MetaCategories",
		Method:             "GET",
		PathPattern:        "/Place/Meta/Categories",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PlaceMetaCategoriesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PlaceMetaCategoriesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Place_MetaCategories: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PlaceMetaPlaceTypes gets a list of the available types of place
*/
func (a *Client) PlaceMetaPlaceTypes(params *PlaceMetaPlaceTypesParams) (*PlaceMetaPlaceTypesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPlaceMetaPlaceTypesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Place_MetaPlaceTypes",
		Method:             "GET",
		PathPattern:        "/Place/Meta/PlaceTypes",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PlaceMetaPlaceTypesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PlaceMetaPlaceTypesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Place_MetaPlaceTypes: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PlaceSearch gets all places that matches the given query
*/
func (a *Client) PlaceSearch(params *PlaceSearchParams) (*PlaceSearchOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPlaceSearchParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Place_Search",
		Method:             "GET",
		PathPattern:        "/Place/Search",
		ProducesMediaTypes: []string{"application/json", "application/xml", "text/json", "text/xml"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PlaceSearchReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PlaceSearchOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Place_Search: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}

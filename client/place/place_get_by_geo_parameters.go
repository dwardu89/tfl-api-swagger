// Code generated by go-swagger; DO NOT EDIT.

package place

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewPlaceGetByGeoParams creates a new PlaceGetByGeoParams object
// with the default values initialized.
func NewPlaceGetByGeoParams() *PlaceGetByGeoParams {
	var ()
	return &PlaceGetByGeoParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewPlaceGetByGeoParamsWithTimeout creates a new PlaceGetByGeoParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewPlaceGetByGeoParamsWithTimeout(timeout time.Duration) *PlaceGetByGeoParams {
	var ()
	return &PlaceGetByGeoParams{

		timeout: timeout,
	}
}

// NewPlaceGetByGeoParamsWithContext creates a new PlaceGetByGeoParams object
// with the default values initialized, and the ability to set a context for a request
func NewPlaceGetByGeoParamsWithContext(ctx context.Context) *PlaceGetByGeoParams {
	var ()
	return &PlaceGetByGeoParams{

		Context: ctx,
	}
}

// NewPlaceGetByGeoParamsWithHTTPClient creates a new PlaceGetByGeoParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewPlaceGetByGeoParamsWithHTTPClient(client *http.Client) *PlaceGetByGeoParams {
	var ()
	return &PlaceGetByGeoParams{
		HTTPClient: client,
	}
}

/*PlaceGetByGeoParams contains all the parameters to send to the API endpoint
for the place get by geo operation typically these are written to a http.Request
*/
type PlaceGetByGeoParams struct {

	/*ActiveOnly
	  An optional parameter to limit the results to active records only (Currently only the 'VariableMessageSign' place type is supported)

	*/
	ActiveOnly *bool
	/*Categories
	  An optional list of comma separated property categories to return in the Place's property bag. If null or empty, all categories of property are returned. Pass the keyword "none" to return no properties (a valid list of categories can be obtained from the /Place/Meta/categories endpoint)

	*/
	Categories []string
	/*IncludeChildren
	  Defaults to false. If true child places e.g. individual charging stations at a charge point while be included, otherwise just the URLs of any child places will be returned

	*/
	IncludeChildren *bool
	/*NumberOfPlacesToReturn
	  If specified, limits the number of returned places equal to the given value

	*/
	NumberOfPlacesToReturn *int32
	/*PlaceGeoLat*/
	PlaceGeoLat *float64
	/*PlaceGeoLon*/
	PlaceGeoLon *float64
	/*PlaceGeoNeLat*/
	PlaceGeoNeLat *float64
	/*PlaceGeoNeLon*/
	PlaceGeoNeLon *float64
	/*PlaceGeoSwLat*/
	PlaceGeoSwLat *float64
	/*PlaceGeoSwLon*/
	PlaceGeoSwLon *float64
	/*Radius
	  The radius of the bounding circle in metres when only lat/lon are specified.

	*/
	Radius *float64
	/*Type
	  Place types to filter on, or null to return all types

	*/
	Type []string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the place get by geo params
func (o *PlaceGetByGeoParams) WithTimeout(timeout time.Duration) *PlaceGetByGeoParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the place get by geo params
func (o *PlaceGetByGeoParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the place get by geo params
func (o *PlaceGetByGeoParams) WithContext(ctx context.Context) *PlaceGetByGeoParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the place get by geo params
func (o *PlaceGetByGeoParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the place get by geo params
func (o *PlaceGetByGeoParams) WithHTTPClient(client *http.Client) *PlaceGetByGeoParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the place get by geo params
func (o *PlaceGetByGeoParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithActiveOnly adds the activeOnly to the place get by geo params
func (o *PlaceGetByGeoParams) WithActiveOnly(activeOnly *bool) *PlaceGetByGeoParams {
	o.SetActiveOnly(activeOnly)
	return o
}

// SetActiveOnly adds the activeOnly to the place get by geo params
func (o *PlaceGetByGeoParams) SetActiveOnly(activeOnly *bool) {
	o.ActiveOnly = activeOnly
}

// WithCategories adds the categories to the place get by geo params
func (o *PlaceGetByGeoParams) WithCategories(categories []string) *PlaceGetByGeoParams {
	o.SetCategories(categories)
	return o
}

// SetCategories adds the categories to the place get by geo params
func (o *PlaceGetByGeoParams) SetCategories(categories []string) {
	o.Categories = categories
}

// WithIncludeChildren adds the includeChildren to the place get by geo params
func (o *PlaceGetByGeoParams) WithIncludeChildren(includeChildren *bool) *PlaceGetByGeoParams {
	o.SetIncludeChildren(includeChildren)
	return o
}

// SetIncludeChildren adds the includeChildren to the place get by geo params
func (o *PlaceGetByGeoParams) SetIncludeChildren(includeChildren *bool) {
	o.IncludeChildren = includeChildren
}

// WithNumberOfPlacesToReturn adds the numberOfPlacesToReturn to the place get by geo params
func (o *PlaceGetByGeoParams) WithNumberOfPlacesToReturn(numberOfPlacesToReturn *int32) *PlaceGetByGeoParams {
	o.SetNumberOfPlacesToReturn(numberOfPlacesToReturn)
	return o
}

// SetNumberOfPlacesToReturn adds the numberOfPlacesToReturn to the place get by geo params
func (o *PlaceGetByGeoParams) SetNumberOfPlacesToReturn(numberOfPlacesToReturn *int32) {
	o.NumberOfPlacesToReturn = numberOfPlacesToReturn
}

// WithPlaceGeoLat adds the placeGeoLat to the place get by geo params
func (o *PlaceGetByGeoParams) WithPlaceGeoLat(placeGeoLat *float64) *PlaceGetByGeoParams {
	o.SetPlaceGeoLat(placeGeoLat)
	return o
}

// SetPlaceGeoLat adds the placeGeoLat to the place get by geo params
func (o *PlaceGetByGeoParams) SetPlaceGeoLat(placeGeoLat *float64) {
	o.PlaceGeoLat = placeGeoLat
}

// WithPlaceGeoLon adds the placeGeoLon to the place get by geo params
func (o *PlaceGetByGeoParams) WithPlaceGeoLon(placeGeoLon *float64) *PlaceGetByGeoParams {
	o.SetPlaceGeoLon(placeGeoLon)
	return o
}

// SetPlaceGeoLon adds the placeGeoLon to the place get by geo params
func (o *PlaceGetByGeoParams) SetPlaceGeoLon(placeGeoLon *float64) {
	o.PlaceGeoLon = placeGeoLon
}

// WithPlaceGeoNeLat adds the placeGeoNeLat to the place get by geo params
func (o *PlaceGetByGeoParams) WithPlaceGeoNeLat(placeGeoNeLat *float64) *PlaceGetByGeoParams {
	o.SetPlaceGeoNeLat(placeGeoNeLat)
	return o
}

// SetPlaceGeoNeLat adds the placeGeoNeLat to the place get by geo params
func (o *PlaceGetByGeoParams) SetPlaceGeoNeLat(placeGeoNeLat *float64) {
	o.PlaceGeoNeLat = placeGeoNeLat
}

// WithPlaceGeoNeLon adds the placeGeoNeLon to the place get by geo params
func (o *PlaceGetByGeoParams) WithPlaceGeoNeLon(placeGeoNeLon *float64) *PlaceGetByGeoParams {
	o.SetPlaceGeoNeLon(placeGeoNeLon)
	return o
}

// SetPlaceGeoNeLon adds the placeGeoNeLon to the place get by geo params
func (o *PlaceGetByGeoParams) SetPlaceGeoNeLon(placeGeoNeLon *float64) {
	o.PlaceGeoNeLon = placeGeoNeLon
}

// WithPlaceGeoSwLat adds the placeGeoSwLat to the place get by geo params
func (o *PlaceGetByGeoParams) WithPlaceGeoSwLat(placeGeoSwLat *float64) *PlaceGetByGeoParams {
	o.SetPlaceGeoSwLat(placeGeoSwLat)
	return o
}

// SetPlaceGeoSwLat adds the placeGeoSwLat to the place get by geo params
func (o *PlaceGetByGeoParams) SetPlaceGeoSwLat(placeGeoSwLat *float64) {
	o.PlaceGeoSwLat = placeGeoSwLat
}

// WithPlaceGeoSwLon adds the placeGeoSwLon to the place get by geo params
func (o *PlaceGetByGeoParams) WithPlaceGeoSwLon(placeGeoSwLon *float64) *PlaceGetByGeoParams {
	o.SetPlaceGeoSwLon(placeGeoSwLon)
	return o
}

// SetPlaceGeoSwLon adds the placeGeoSwLon to the place get by geo params
func (o *PlaceGetByGeoParams) SetPlaceGeoSwLon(placeGeoSwLon *float64) {
	o.PlaceGeoSwLon = placeGeoSwLon
}

// WithRadius adds the radius to the place get by geo params
func (o *PlaceGetByGeoParams) WithRadius(radius *float64) *PlaceGetByGeoParams {
	o.SetRadius(radius)
	return o
}

// SetRadius adds the radius to the place get by geo params
func (o *PlaceGetByGeoParams) SetRadius(radius *float64) {
	o.Radius = radius
}

// WithType adds the typeVar to the place get by geo params
func (o *PlaceGetByGeoParams) WithType(typeVar []string) *PlaceGetByGeoParams {
	o.SetType(typeVar)
	return o
}

// SetType adds the type to the place get by geo params
func (o *PlaceGetByGeoParams) SetType(typeVar []string) {
	o.Type = typeVar
}

// WriteToRequest writes these params to a swagger request
func (o *PlaceGetByGeoParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.ActiveOnly != nil {

		// query param activeOnly
		var qrActiveOnly bool
		if o.ActiveOnly != nil {
			qrActiveOnly = *o.ActiveOnly
		}
		qActiveOnly := swag.FormatBool(qrActiveOnly)
		if qActiveOnly != "" {
			if err := r.SetQueryParam("activeOnly", qActiveOnly); err != nil {
				return err
			}
		}

	}

	valuesCategories := o.Categories

	joinedCategories := swag.JoinByFormat(valuesCategories, "multi")
	// query array param categories
	if err := r.SetQueryParam("categories", joinedCategories...); err != nil {
		return err
	}

	if o.IncludeChildren != nil {

		// query param includeChildren
		var qrIncludeChildren bool
		if o.IncludeChildren != nil {
			qrIncludeChildren = *o.IncludeChildren
		}
		qIncludeChildren := swag.FormatBool(qrIncludeChildren)
		if qIncludeChildren != "" {
			if err := r.SetQueryParam("includeChildren", qIncludeChildren); err != nil {
				return err
			}
		}

	}

	if o.NumberOfPlacesToReturn != nil {

		// query param numberOfPlacesToReturn
		var qrNumberOfPlacesToReturn int32
		if o.NumberOfPlacesToReturn != nil {
			qrNumberOfPlacesToReturn = *o.NumberOfPlacesToReturn
		}
		qNumberOfPlacesToReturn := swag.FormatInt32(qrNumberOfPlacesToReturn)
		if qNumberOfPlacesToReturn != "" {
			if err := r.SetQueryParam("numberOfPlacesToReturn", qNumberOfPlacesToReturn); err != nil {
				return err
			}
		}

	}

	if o.PlaceGeoLat != nil {

		// query param placeGeo.lat
		var qrPlaceGeoLat float64
		if o.PlaceGeoLat != nil {
			qrPlaceGeoLat = *o.PlaceGeoLat
		}
		qPlaceGeoLat := swag.FormatFloat64(qrPlaceGeoLat)
		if qPlaceGeoLat != "" {
			if err := r.SetQueryParam("placeGeo.lat", qPlaceGeoLat); err != nil {
				return err
			}
		}

	}

	if o.PlaceGeoLon != nil {

		// query param placeGeo.lon
		var qrPlaceGeoLon float64
		if o.PlaceGeoLon != nil {
			qrPlaceGeoLon = *o.PlaceGeoLon
		}
		qPlaceGeoLon := swag.FormatFloat64(qrPlaceGeoLon)
		if qPlaceGeoLon != "" {
			if err := r.SetQueryParam("placeGeo.lon", qPlaceGeoLon); err != nil {
				return err
			}
		}

	}

	if o.PlaceGeoNeLat != nil {

		// query param placeGeo.neLat
		var qrPlaceGeoNeLat float64
		if o.PlaceGeoNeLat != nil {
			qrPlaceGeoNeLat = *o.PlaceGeoNeLat
		}
		qPlaceGeoNeLat := swag.FormatFloat64(qrPlaceGeoNeLat)
		if qPlaceGeoNeLat != "" {
			if err := r.SetQueryParam("placeGeo.neLat", qPlaceGeoNeLat); err != nil {
				return err
			}
		}

	}

	if o.PlaceGeoNeLon != nil {

		// query param placeGeo.neLon
		var qrPlaceGeoNeLon float64
		if o.PlaceGeoNeLon != nil {
			qrPlaceGeoNeLon = *o.PlaceGeoNeLon
		}
		qPlaceGeoNeLon := swag.FormatFloat64(qrPlaceGeoNeLon)
		if qPlaceGeoNeLon != "" {
			if err := r.SetQueryParam("placeGeo.neLon", qPlaceGeoNeLon); err != nil {
				return err
			}
		}

	}

	if o.PlaceGeoSwLat != nil {

		// query param placeGeo.swLat
		var qrPlaceGeoSwLat float64
		if o.PlaceGeoSwLat != nil {
			qrPlaceGeoSwLat = *o.PlaceGeoSwLat
		}
		qPlaceGeoSwLat := swag.FormatFloat64(qrPlaceGeoSwLat)
		if qPlaceGeoSwLat != "" {
			if err := r.SetQueryParam("placeGeo.swLat", qPlaceGeoSwLat); err != nil {
				return err
			}
		}

	}

	if o.PlaceGeoSwLon != nil {

		// query param placeGeo.swLon
		var qrPlaceGeoSwLon float64
		if o.PlaceGeoSwLon != nil {
			qrPlaceGeoSwLon = *o.PlaceGeoSwLon
		}
		qPlaceGeoSwLon := swag.FormatFloat64(qrPlaceGeoSwLon)
		if qPlaceGeoSwLon != "" {
			if err := r.SetQueryParam("placeGeo.swLon", qPlaceGeoSwLon); err != nil {
				return err
			}
		}

	}

	if o.Radius != nil {

		// query param radius
		var qrRadius float64
		if o.Radius != nil {
			qrRadius = *o.Radius
		}
		qRadius := swag.FormatFloat64(qrRadius)
		if qRadius != "" {
			if err := r.SetQueryParam("radius", qRadius); err != nil {
				return err
			}
		}

	}

	valuesType := o.Type

	joinedType := swag.JoinByFormat(valuesType, "multi")
	// query array param type
	if err := r.SetQueryParam("type", joinedType...); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

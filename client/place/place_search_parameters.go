// Code generated by go-swagger; DO NOT EDIT.

package place

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewPlaceSearchParams creates a new PlaceSearchParams object
// with the default values initialized.
func NewPlaceSearchParams() *PlaceSearchParams {
	var ()
	return &PlaceSearchParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewPlaceSearchParamsWithTimeout creates a new PlaceSearchParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewPlaceSearchParamsWithTimeout(timeout time.Duration) *PlaceSearchParams {
	var ()
	return &PlaceSearchParams{

		timeout: timeout,
	}
}

// NewPlaceSearchParamsWithContext creates a new PlaceSearchParams object
// with the default values initialized, and the ability to set a context for a request
func NewPlaceSearchParamsWithContext(ctx context.Context) *PlaceSearchParams {
	var ()
	return &PlaceSearchParams{

		Context: ctx,
	}
}

// NewPlaceSearchParamsWithHTTPClient creates a new PlaceSearchParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewPlaceSearchParamsWithHTTPClient(client *http.Client) *PlaceSearchParams {
	var ()
	return &PlaceSearchParams{
		HTTPClient: client,
	}
}

/*PlaceSearchParams contains all the parameters to send to the API endpoint
for the place search operation typically these are written to a http.Request
*/
type PlaceSearchParams struct {

	/*Name
	  The name of the place, you can use the /Place/Types/{types} endpoint to get a list of places for a given type including their names.

	*/
	Name string
	/*Types
	  A comma-separated list of the types to return. Max. approx 12 types.

	*/
	Types []string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the place search params
func (o *PlaceSearchParams) WithTimeout(timeout time.Duration) *PlaceSearchParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the place search params
func (o *PlaceSearchParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the place search params
func (o *PlaceSearchParams) WithContext(ctx context.Context) *PlaceSearchParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the place search params
func (o *PlaceSearchParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the place search params
func (o *PlaceSearchParams) WithHTTPClient(client *http.Client) *PlaceSearchParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the place search params
func (o *PlaceSearchParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithName adds the name to the place search params
func (o *PlaceSearchParams) WithName(name string) *PlaceSearchParams {
	o.SetName(name)
	return o
}

// SetName adds the name to the place search params
func (o *PlaceSearchParams) SetName(name string) {
	o.Name = name
}

// WithTypes adds the types to the place search params
func (o *PlaceSearchParams) WithTypes(types []string) *PlaceSearchParams {
	o.SetTypes(types)
	return o
}

// SetTypes adds the types to the place search params
func (o *PlaceSearchParams) SetTypes(types []string) {
	o.Types = types
}

// WriteToRequest writes these params to a swagger request
func (o *PlaceSearchParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// query param name
	qrName := o.Name
	qName := qrName
	if qName != "" {
		if err := r.SetQueryParam("name", qName); err != nil {
			return err
		}
	}

	valuesTypes := o.Types

	joinedTypes := swag.JoinByFormat(valuesTypes, "multi")
	// query array param types
	if err := r.SetQueryParam("types", joinedTypes...); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// Code generated by go-swagger; DO NOT EDIT.

package line

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewLineArrivalsParams creates a new LineArrivalsParams object
// with the default values initialized.
func NewLineArrivalsParams() *LineArrivalsParams {
	var ()
	return &LineArrivalsParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewLineArrivalsParamsWithTimeout creates a new LineArrivalsParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewLineArrivalsParamsWithTimeout(timeout time.Duration) *LineArrivalsParams {
	var ()
	return &LineArrivalsParams{

		timeout: timeout,
	}
}

// NewLineArrivalsParamsWithContext creates a new LineArrivalsParams object
// with the default values initialized, and the ability to set a context for a request
func NewLineArrivalsParamsWithContext(ctx context.Context) *LineArrivalsParams {
	var ()
	return &LineArrivalsParams{

		Context: ctx,
	}
}

// NewLineArrivalsParamsWithHTTPClient creates a new LineArrivalsParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewLineArrivalsParamsWithHTTPClient(client *http.Client) *LineArrivalsParams {
	var ()
	return &LineArrivalsParams{
		HTTPClient: client,
	}
}

/*LineArrivalsParams contains all the parameters to send to the API endpoint
for the line arrivals operation typically these are written to a http.Request
*/
type LineArrivalsParams struct {

	/*DestinationStationID
	  Optional. Id of destination stop

	*/
	DestinationStationID *string
	/*Direction
	  Optional. The direction of travel. Can be inbound or outbound or all. If left blank, and destinationStopId is set, will default to all

	*/
	Direction *string
	/*Ids
	  A comma-separated list of line ids e.g. victoria,circle,N133. Max. approx. 20 ids.

	*/
	Ids []string
	/*StopPointID
	  Optional. Id of stop to get arrival predictions for (station naptan code e.g. 940GZZLUASL, you can use /StopPoint/Search/{query} endpoint to find a stop point id from a station name)

	*/
	StopPointID string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the line arrivals params
func (o *LineArrivalsParams) WithTimeout(timeout time.Duration) *LineArrivalsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the line arrivals params
func (o *LineArrivalsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the line arrivals params
func (o *LineArrivalsParams) WithContext(ctx context.Context) *LineArrivalsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the line arrivals params
func (o *LineArrivalsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the line arrivals params
func (o *LineArrivalsParams) WithHTTPClient(client *http.Client) *LineArrivalsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the line arrivals params
func (o *LineArrivalsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithDestinationStationID adds the destinationStationID to the line arrivals params
func (o *LineArrivalsParams) WithDestinationStationID(destinationStationID *string) *LineArrivalsParams {
	o.SetDestinationStationID(destinationStationID)
	return o
}

// SetDestinationStationID adds the destinationStationId to the line arrivals params
func (o *LineArrivalsParams) SetDestinationStationID(destinationStationID *string) {
	o.DestinationStationID = destinationStationID
}

// WithDirection adds the direction to the line arrivals params
func (o *LineArrivalsParams) WithDirection(direction *string) *LineArrivalsParams {
	o.SetDirection(direction)
	return o
}

// SetDirection adds the direction to the line arrivals params
func (o *LineArrivalsParams) SetDirection(direction *string) {
	o.Direction = direction
}

// WithIds adds the ids to the line arrivals params
func (o *LineArrivalsParams) WithIds(ids []string) *LineArrivalsParams {
	o.SetIds(ids)
	return o
}

// SetIds adds the ids to the line arrivals params
func (o *LineArrivalsParams) SetIds(ids []string) {
	o.Ids = ids
}

// WithStopPointID adds the stopPointID to the line arrivals params
func (o *LineArrivalsParams) WithStopPointID(stopPointID string) *LineArrivalsParams {
	o.SetStopPointID(stopPointID)
	return o
}

// SetStopPointID adds the stopPointId to the line arrivals params
func (o *LineArrivalsParams) SetStopPointID(stopPointID string) {
	o.StopPointID = stopPointID
}

// WriteToRequest writes these params to a swagger request
func (o *LineArrivalsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.DestinationStationID != nil {

		// query param destinationStationId
		var qrDestinationStationID string
		if o.DestinationStationID != nil {
			qrDestinationStationID = *o.DestinationStationID
		}
		qDestinationStationID := qrDestinationStationID
		if qDestinationStationID != "" {
			if err := r.SetQueryParam("destinationStationId", qDestinationStationID); err != nil {
				return err
			}
		}

	}

	if o.Direction != nil {

		// query param direction
		var qrDirection string
		if o.Direction != nil {
			qrDirection = *o.Direction
		}
		qDirection := qrDirection
		if qDirection != "" {
			if err := r.SetQueryParam("direction", qDirection); err != nil {
				return err
			}
		}

	}

	valuesIds := o.Ids

	joinedIds := swag.JoinByFormat(valuesIds, "")
	// path array param ids
	// SetPathParam does not support variadric arguments, since we used JoinByFormat
	// we can send the first item in the array as it's all the items of the previous
	// array joined together
	if len(joinedIds) > 0 {
		if err := r.SetPathParam("ids", joinedIds[0]); err != nil {
			return err
		}
	}

	// path param stopPointId
	if err := r.SetPathParam("stopPointId", o.StopPointID); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

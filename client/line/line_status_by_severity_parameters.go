// Code generated by go-swagger; DO NOT EDIT.

package line

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewLineStatusBySeverityParams creates a new LineStatusBySeverityParams object
// with the default values initialized.
func NewLineStatusBySeverityParams() *LineStatusBySeverityParams {
	var ()
	return &LineStatusBySeverityParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewLineStatusBySeverityParamsWithTimeout creates a new LineStatusBySeverityParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewLineStatusBySeverityParamsWithTimeout(timeout time.Duration) *LineStatusBySeverityParams {
	var ()
	return &LineStatusBySeverityParams{

		timeout: timeout,
	}
}

// NewLineStatusBySeverityParamsWithContext creates a new LineStatusBySeverityParams object
// with the default values initialized, and the ability to set a context for a request
func NewLineStatusBySeverityParamsWithContext(ctx context.Context) *LineStatusBySeverityParams {
	var ()
	return &LineStatusBySeverityParams{

		Context: ctx,
	}
}

// NewLineStatusBySeverityParamsWithHTTPClient creates a new LineStatusBySeverityParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewLineStatusBySeverityParamsWithHTTPClient(client *http.Client) *LineStatusBySeverityParams {
	var ()
	return &LineStatusBySeverityParams{
		HTTPClient: client,
	}
}

/*LineStatusBySeverityParams contains all the parameters to send to the API endpoint
for the line status by severity operation typically these are written to a http.Request
*/
type LineStatusBySeverityParams struct {

	/*Severity
	  The level of severity (eg: a number from 0 to 14)

	*/
	Severity int32

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the line status by severity params
func (o *LineStatusBySeverityParams) WithTimeout(timeout time.Duration) *LineStatusBySeverityParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the line status by severity params
func (o *LineStatusBySeverityParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the line status by severity params
func (o *LineStatusBySeverityParams) WithContext(ctx context.Context) *LineStatusBySeverityParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the line status by severity params
func (o *LineStatusBySeverityParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the line status by severity params
func (o *LineStatusBySeverityParams) WithHTTPClient(client *http.Client) *LineStatusBySeverityParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the line status by severity params
func (o *LineStatusBySeverityParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithSeverity adds the severity to the line status by severity params
func (o *LineStatusBySeverityParams) WithSeverity(severity int32) *LineStatusBySeverityParams {
	o.SetSeverity(severity)
	return o
}

// SetSeverity adds the severity to the line status by severity params
func (o *LineStatusBySeverityParams) SetSeverity(severity int32) {
	o.Severity = severity
}

// WriteToRequest writes these params to a swagger request
func (o *LineStatusBySeverityParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param severity
	if err := r.SetPathParam("severity", swag.FormatInt32(o.Severity)); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// Code generated by go-swagger; DO NOT EDIT.

package line

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewLineStatusParams creates a new LineStatusParams object
// with the default values initialized.
func NewLineStatusParams() *LineStatusParams {
	var ()
	return &LineStatusParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewLineStatusParamsWithTimeout creates a new LineStatusParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewLineStatusParamsWithTimeout(timeout time.Duration) *LineStatusParams {
	var ()
	return &LineStatusParams{

		timeout: timeout,
	}
}

// NewLineStatusParamsWithContext creates a new LineStatusParams object
// with the default values initialized, and the ability to set a context for a request
func NewLineStatusParamsWithContext(ctx context.Context) *LineStatusParams {
	var ()
	return &LineStatusParams{

		Context: ctx,
	}
}

// NewLineStatusParamsWithHTTPClient creates a new LineStatusParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewLineStatusParamsWithHTTPClient(client *http.Client) *LineStatusParams {
	var ()
	return &LineStatusParams{
		HTTPClient: client,
	}
}

/*LineStatusParams contains all the parameters to send to the API endpoint
for the line status operation typically these are written to a http.Request
*/
type LineStatusParams struct {

	/*DateRangeEndDate*/
	DateRangeEndDate *strfmt.DateTime
	/*DateRangeStartDate*/
	DateRangeStartDate *strfmt.DateTime
	/*Detail
	  Include details of the disruptions that are causing the line status including the affected stops and routes

	*/
	Detail *bool
	/*EndDate*/
	EndDate string
	/*Ids
	  A comma-separated list of line ids e.g. victoria,circle,N133. Max. approx. 20 ids.

	*/
	Ids []string
	/*StartDate*/
	StartDate string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the line status params
func (o *LineStatusParams) WithTimeout(timeout time.Duration) *LineStatusParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the line status params
func (o *LineStatusParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the line status params
func (o *LineStatusParams) WithContext(ctx context.Context) *LineStatusParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the line status params
func (o *LineStatusParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the line status params
func (o *LineStatusParams) WithHTTPClient(client *http.Client) *LineStatusParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the line status params
func (o *LineStatusParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithDateRangeEndDate adds the dateRangeEndDate to the line status params
func (o *LineStatusParams) WithDateRangeEndDate(dateRangeEndDate *strfmt.DateTime) *LineStatusParams {
	o.SetDateRangeEndDate(dateRangeEndDate)
	return o
}

// SetDateRangeEndDate adds the dateRangeEndDate to the line status params
func (o *LineStatusParams) SetDateRangeEndDate(dateRangeEndDate *strfmt.DateTime) {
	o.DateRangeEndDate = dateRangeEndDate
}

// WithDateRangeStartDate adds the dateRangeStartDate to the line status params
func (o *LineStatusParams) WithDateRangeStartDate(dateRangeStartDate *strfmt.DateTime) *LineStatusParams {
	o.SetDateRangeStartDate(dateRangeStartDate)
	return o
}

// SetDateRangeStartDate adds the dateRangeStartDate to the line status params
func (o *LineStatusParams) SetDateRangeStartDate(dateRangeStartDate *strfmt.DateTime) {
	o.DateRangeStartDate = dateRangeStartDate
}

// WithDetail adds the detail to the line status params
func (o *LineStatusParams) WithDetail(detail *bool) *LineStatusParams {
	o.SetDetail(detail)
	return o
}

// SetDetail adds the detail to the line status params
func (o *LineStatusParams) SetDetail(detail *bool) {
	o.Detail = detail
}

// WithEndDate adds the endDate to the line status params
func (o *LineStatusParams) WithEndDate(endDate string) *LineStatusParams {
	o.SetEndDate(endDate)
	return o
}

// SetEndDate adds the endDate to the line status params
func (o *LineStatusParams) SetEndDate(endDate string) {
	o.EndDate = endDate
}

// WithIds adds the ids to the line status params
func (o *LineStatusParams) WithIds(ids []string) *LineStatusParams {
	o.SetIds(ids)
	return o
}

// SetIds adds the ids to the line status params
func (o *LineStatusParams) SetIds(ids []string) {
	o.Ids = ids
}

// WithStartDate adds the startDate to the line status params
func (o *LineStatusParams) WithStartDate(startDate string) *LineStatusParams {
	o.SetStartDate(startDate)
	return o
}

// SetStartDate adds the startDate to the line status params
func (o *LineStatusParams) SetStartDate(startDate string) {
	o.StartDate = startDate
}

// WriteToRequest writes these params to a swagger request
func (o *LineStatusParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.DateRangeEndDate != nil {

		// query param dateRange.endDate
		var qrDateRangeEndDate strfmt.DateTime
		if o.DateRangeEndDate != nil {
			qrDateRangeEndDate = *o.DateRangeEndDate
		}
		qDateRangeEndDate := qrDateRangeEndDate.String()
		if qDateRangeEndDate != "" {
			if err := r.SetQueryParam("dateRange.endDate", qDateRangeEndDate); err != nil {
				return err
			}
		}

	}

	if o.DateRangeStartDate != nil {

		// query param dateRange.startDate
		var qrDateRangeStartDate strfmt.DateTime
		if o.DateRangeStartDate != nil {
			qrDateRangeStartDate = *o.DateRangeStartDate
		}
		qDateRangeStartDate := qrDateRangeStartDate.String()
		if qDateRangeStartDate != "" {
			if err := r.SetQueryParam("dateRange.startDate", qDateRangeStartDate); err != nil {
				return err
			}
		}

	}

	if o.Detail != nil {

		// query param detail
		var qrDetail bool
		if o.Detail != nil {
			qrDetail = *o.Detail
		}
		qDetail := swag.FormatBool(qrDetail)
		if qDetail != "" {
			if err := r.SetQueryParam("detail", qDetail); err != nil {
				return err
			}
		}

	}

	// query param endDate
	qrEndDate := o.EndDate
	qEndDate := qrEndDate
	if qEndDate != "" {
		if err := r.SetQueryParam("endDate", qEndDate); err != nil {
			return err
		}
	}

	valuesIds := o.Ids

	joinedIds := swag.JoinByFormat(valuesIds, "")
	// path array param ids
	// SetPathParam does not support variadric arguments, since we used JoinByFormat
	// we can send the first item in the array as it's all the items of the previous
	// array joined together
	if len(joinedIds) > 0 {
		if err := r.SetPathParam("ids", joinedIds[0]); err != nil {
			return err
		}
	}

	// query param startDate
	qrStartDate := o.StartDate
	qStartDate := qrStartDate
	if qStartDate != "" {
		if err := r.SetQueryParam("startDate", qStartDate); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

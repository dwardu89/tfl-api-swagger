// Code generated by go-swagger; DO NOT EDIT.

package line

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"
)

// NewLineTimetableToParams creates a new LineTimetableToParams object
// with the default values initialized.
func NewLineTimetableToParams() *LineTimetableToParams {
	var ()
	return &LineTimetableToParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewLineTimetableToParamsWithTimeout creates a new LineTimetableToParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewLineTimetableToParamsWithTimeout(timeout time.Duration) *LineTimetableToParams {
	var ()
	return &LineTimetableToParams{

		timeout: timeout,
	}
}

// NewLineTimetableToParamsWithContext creates a new LineTimetableToParams object
// with the default values initialized, and the ability to set a context for a request
func NewLineTimetableToParamsWithContext(ctx context.Context) *LineTimetableToParams {
	var ()
	return &LineTimetableToParams{

		Context: ctx,
	}
}

// NewLineTimetableToParamsWithHTTPClient creates a new LineTimetableToParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewLineTimetableToParamsWithHTTPClient(client *http.Client) *LineTimetableToParams {
	var ()
	return &LineTimetableToParams{
		HTTPClient: client,
	}
}

/*LineTimetableToParams contains all the parameters to send to the API endpoint
for the line timetable to operation typically these are written to a http.Request
*/
type LineTimetableToParams struct {

	/*FromStopPointID
	  The originating station's stop point id (station naptan code e.g. 940GZZLUASL, you can use /StopPoint/Search/{query} endpoint to find a stop point id from a station name)

	*/
	FromStopPointID string
	/*ID
	  A single line id e.g. victoria

	*/
	ID string
	/*ToStopPointID
	  The destination stations's Naptan code

	*/
	ToStopPointID string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the line timetable to params
func (o *LineTimetableToParams) WithTimeout(timeout time.Duration) *LineTimetableToParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the line timetable to params
func (o *LineTimetableToParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the line timetable to params
func (o *LineTimetableToParams) WithContext(ctx context.Context) *LineTimetableToParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the line timetable to params
func (o *LineTimetableToParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the line timetable to params
func (o *LineTimetableToParams) WithHTTPClient(client *http.Client) *LineTimetableToParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the line timetable to params
func (o *LineTimetableToParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithFromStopPointID adds the fromStopPointID to the line timetable to params
func (o *LineTimetableToParams) WithFromStopPointID(fromStopPointID string) *LineTimetableToParams {
	o.SetFromStopPointID(fromStopPointID)
	return o
}

// SetFromStopPointID adds the fromStopPointId to the line timetable to params
func (o *LineTimetableToParams) SetFromStopPointID(fromStopPointID string) {
	o.FromStopPointID = fromStopPointID
}

// WithID adds the id to the line timetable to params
func (o *LineTimetableToParams) WithID(id string) *LineTimetableToParams {
	o.SetID(id)
	return o
}

// SetID adds the id to the line timetable to params
func (o *LineTimetableToParams) SetID(id string) {
	o.ID = id
}

// WithToStopPointID adds the toStopPointID to the line timetable to params
func (o *LineTimetableToParams) WithToStopPointID(toStopPointID string) *LineTimetableToParams {
	o.SetToStopPointID(toStopPointID)
	return o
}

// SetToStopPointID adds the toStopPointId to the line timetable to params
func (o *LineTimetableToParams) SetToStopPointID(toStopPointID string) {
	o.ToStopPointID = toStopPointID
}

// WriteToRequest writes these params to a swagger request
func (o *LineTimetableToParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param fromStopPointId
	if err := r.SetPathParam("fromStopPointId", o.FromStopPointID); err != nil {
		return err
	}

	// path param id
	if err := r.SetPathParam("id", o.ID); err != nil {
		return err
	}

	// path param toStopPointId
	if err := r.SetPathParam("toStopPointId", o.ToStopPointID); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

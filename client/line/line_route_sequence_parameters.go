// Code generated by go-swagger; DO NOT EDIT.

package line

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewLineRouteSequenceParams creates a new LineRouteSequenceParams object
// with the default values initialized.
func NewLineRouteSequenceParams() *LineRouteSequenceParams {
	var ()
	return &LineRouteSequenceParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewLineRouteSequenceParamsWithTimeout creates a new LineRouteSequenceParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewLineRouteSequenceParamsWithTimeout(timeout time.Duration) *LineRouteSequenceParams {
	var ()
	return &LineRouteSequenceParams{

		timeout: timeout,
	}
}

// NewLineRouteSequenceParamsWithContext creates a new LineRouteSequenceParams object
// with the default values initialized, and the ability to set a context for a request
func NewLineRouteSequenceParamsWithContext(ctx context.Context) *LineRouteSequenceParams {
	var ()
	return &LineRouteSequenceParams{

		Context: ctx,
	}
}

// NewLineRouteSequenceParamsWithHTTPClient creates a new LineRouteSequenceParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewLineRouteSequenceParamsWithHTTPClient(client *http.Client) *LineRouteSequenceParams {
	var ()
	return &LineRouteSequenceParams{
		HTTPClient: client,
	}
}

/*LineRouteSequenceParams contains all the parameters to send to the API endpoint
for the line route sequence operation typically these are written to a http.Request
*/
type LineRouteSequenceParams struct {

	/*Direction
	  The direction of travel. Can be inbound or outbound.

	*/
	Direction string
	/*ExcludeCrowding
	  That excludes crowding from line disruptions. Can be true or false.

	*/
	ExcludeCrowding *bool
	/*ID
	  A single line id e.g. victoria

	*/
	ID string
	/*ServiceTypes
	  A comma seperated list of service types to filter on. Supported values: Regular, Night. Defaulted to 'Regular' if not specified

	*/
	ServiceTypes []string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the line route sequence params
func (o *LineRouteSequenceParams) WithTimeout(timeout time.Duration) *LineRouteSequenceParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the line route sequence params
func (o *LineRouteSequenceParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the line route sequence params
func (o *LineRouteSequenceParams) WithContext(ctx context.Context) *LineRouteSequenceParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the line route sequence params
func (o *LineRouteSequenceParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the line route sequence params
func (o *LineRouteSequenceParams) WithHTTPClient(client *http.Client) *LineRouteSequenceParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the line route sequence params
func (o *LineRouteSequenceParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithDirection adds the direction to the line route sequence params
func (o *LineRouteSequenceParams) WithDirection(direction string) *LineRouteSequenceParams {
	o.SetDirection(direction)
	return o
}

// SetDirection adds the direction to the line route sequence params
func (o *LineRouteSequenceParams) SetDirection(direction string) {
	o.Direction = direction
}

// WithExcludeCrowding adds the excludeCrowding to the line route sequence params
func (o *LineRouteSequenceParams) WithExcludeCrowding(excludeCrowding *bool) *LineRouteSequenceParams {
	o.SetExcludeCrowding(excludeCrowding)
	return o
}

// SetExcludeCrowding adds the excludeCrowding to the line route sequence params
func (o *LineRouteSequenceParams) SetExcludeCrowding(excludeCrowding *bool) {
	o.ExcludeCrowding = excludeCrowding
}

// WithID adds the id to the line route sequence params
func (o *LineRouteSequenceParams) WithID(id string) *LineRouteSequenceParams {
	o.SetID(id)
	return o
}

// SetID adds the id to the line route sequence params
func (o *LineRouteSequenceParams) SetID(id string) {
	o.ID = id
}

// WithServiceTypes adds the serviceTypes to the line route sequence params
func (o *LineRouteSequenceParams) WithServiceTypes(serviceTypes []string) *LineRouteSequenceParams {
	o.SetServiceTypes(serviceTypes)
	return o
}

// SetServiceTypes adds the serviceTypes to the line route sequence params
func (o *LineRouteSequenceParams) SetServiceTypes(serviceTypes []string) {
	o.ServiceTypes = serviceTypes
}

// WriteToRequest writes these params to a swagger request
func (o *LineRouteSequenceParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param direction
	if err := r.SetPathParam("direction", o.Direction); err != nil {
		return err
	}

	if o.ExcludeCrowding != nil {

		// query param excludeCrowding
		var qrExcludeCrowding bool
		if o.ExcludeCrowding != nil {
			qrExcludeCrowding = *o.ExcludeCrowding
		}
		qExcludeCrowding := swag.FormatBool(qrExcludeCrowding)
		if qExcludeCrowding != "" {
			if err := r.SetQueryParam("excludeCrowding", qExcludeCrowding); err != nil {
				return err
			}
		}

	}

	// path param id
	if err := r.SetPathParam("id", o.ID); err != nil {
		return err
	}

	valuesServiceTypes := o.ServiceTypes

	joinedServiceTypes := swag.JoinByFormat(valuesServiceTypes, "multi")
	// query array param serviceTypes
	if err := r.SetQueryParam("serviceTypes", joinedServiceTypes...); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// Code generated by go-swagger; DO NOT EDIT.

package occupancy

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/dwardu89/tfl-api-swagger/models"
)

// OccupancyGetChargeConnectorStatusReader is a Reader for the OccupancyGetChargeConnectorStatus structure.
type OccupancyGetChargeConnectorStatusReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *OccupancyGetChargeConnectorStatusReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewOccupancyGetChargeConnectorStatusOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewOccupancyGetChargeConnectorStatusOK creates a OccupancyGetChargeConnectorStatusOK with default headers values
func NewOccupancyGetChargeConnectorStatusOK() *OccupancyGetChargeConnectorStatusOK {
	return &OccupancyGetChargeConnectorStatusOK{}
}

/*OccupancyGetChargeConnectorStatusOK handles this case with default header values.

OK
*/
type OccupancyGetChargeConnectorStatusOK struct {
	Payload []*models.TflAPIPresentationEntitiesChargeConnectorOccupancy
}

func (o *OccupancyGetChargeConnectorStatusOK) Error() string {
	return fmt.Sprintf("[GET /Occupancy/ChargeConnector/{ids}][%d] occupancyGetChargeConnectorStatusOK  %+v", 200, o.Payload)
}

func (o *OccupancyGetChargeConnectorStatusOK) GetPayload() []*models.TflAPIPresentationEntitiesChargeConnectorOccupancy {
	return o.Payload
}

func (o *OccupancyGetChargeConnectorStatusOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

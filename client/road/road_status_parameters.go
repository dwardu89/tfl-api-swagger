// Code generated by go-swagger; DO NOT EDIT.

package road

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewRoadStatusParams creates a new RoadStatusParams object
// with the default values initialized.
func NewRoadStatusParams() *RoadStatusParams {
	var ()
	return &RoadStatusParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewRoadStatusParamsWithTimeout creates a new RoadStatusParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewRoadStatusParamsWithTimeout(timeout time.Duration) *RoadStatusParams {
	var ()
	return &RoadStatusParams{

		timeout: timeout,
	}
}

// NewRoadStatusParamsWithContext creates a new RoadStatusParams object
// with the default values initialized, and the ability to set a context for a request
func NewRoadStatusParamsWithContext(ctx context.Context) *RoadStatusParams {
	var ()
	return &RoadStatusParams{

		Context: ctx,
	}
}

// NewRoadStatusParamsWithHTTPClient creates a new RoadStatusParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewRoadStatusParamsWithHTTPClient(client *http.Client) *RoadStatusParams {
	var ()
	return &RoadStatusParams{
		HTTPClient: client,
	}
}

/*RoadStatusParams contains all the parameters to send to the API endpoint
for the road status operation typically these are written to a http.Request
*/
type RoadStatusParams struct {

	/*DateRangeNullableEndDate*/
	DateRangeNullableEndDate *strfmt.DateTime
	/*DateRangeNullableStartDate*/
	DateRangeNullableStartDate *strfmt.DateTime
	/*Ids
	  Comma-separated list of road identifiers e.g. "A406, A2" or use "all" to ignore id filter (a full list of supported road identifiers can be found at the /Road/ endpoint)

	*/
	Ids []string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the road status params
func (o *RoadStatusParams) WithTimeout(timeout time.Duration) *RoadStatusParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the road status params
func (o *RoadStatusParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the road status params
func (o *RoadStatusParams) WithContext(ctx context.Context) *RoadStatusParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the road status params
func (o *RoadStatusParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the road status params
func (o *RoadStatusParams) WithHTTPClient(client *http.Client) *RoadStatusParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the road status params
func (o *RoadStatusParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithDateRangeNullableEndDate adds the dateRangeNullableEndDate to the road status params
func (o *RoadStatusParams) WithDateRangeNullableEndDate(dateRangeNullableEndDate *strfmt.DateTime) *RoadStatusParams {
	o.SetDateRangeNullableEndDate(dateRangeNullableEndDate)
	return o
}

// SetDateRangeNullableEndDate adds the dateRangeNullableEndDate to the road status params
func (o *RoadStatusParams) SetDateRangeNullableEndDate(dateRangeNullableEndDate *strfmt.DateTime) {
	o.DateRangeNullableEndDate = dateRangeNullableEndDate
}

// WithDateRangeNullableStartDate adds the dateRangeNullableStartDate to the road status params
func (o *RoadStatusParams) WithDateRangeNullableStartDate(dateRangeNullableStartDate *strfmt.DateTime) *RoadStatusParams {
	o.SetDateRangeNullableStartDate(dateRangeNullableStartDate)
	return o
}

// SetDateRangeNullableStartDate adds the dateRangeNullableStartDate to the road status params
func (o *RoadStatusParams) SetDateRangeNullableStartDate(dateRangeNullableStartDate *strfmt.DateTime) {
	o.DateRangeNullableStartDate = dateRangeNullableStartDate
}

// WithIds adds the ids to the road status params
func (o *RoadStatusParams) WithIds(ids []string) *RoadStatusParams {
	o.SetIds(ids)
	return o
}

// SetIds adds the ids to the road status params
func (o *RoadStatusParams) SetIds(ids []string) {
	o.Ids = ids
}

// WriteToRequest writes these params to a swagger request
func (o *RoadStatusParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.DateRangeNullableEndDate != nil {

		// query param dateRangeNullable.endDate
		var qrDateRangeNullableEndDate strfmt.DateTime
		if o.DateRangeNullableEndDate != nil {
			qrDateRangeNullableEndDate = *o.DateRangeNullableEndDate
		}
		qDateRangeNullableEndDate := qrDateRangeNullableEndDate.String()
		if qDateRangeNullableEndDate != "" {
			if err := r.SetQueryParam("dateRangeNullable.endDate", qDateRangeNullableEndDate); err != nil {
				return err
			}
		}

	}

	if o.DateRangeNullableStartDate != nil {

		// query param dateRangeNullable.startDate
		var qrDateRangeNullableStartDate strfmt.DateTime
		if o.DateRangeNullableStartDate != nil {
			qrDateRangeNullableStartDate = *o.DateRangeNullableStartDate
		}
		qDateRangeNullableStartDate := qrDateRangeNullableStartDate.String()
		if qDateRangeNullableStartDate != "" {
			if err := r.SetQueryParam("dateRangeNullable.startDate", qDateRangeNullableStartDate); err != nil {
				return err
			}
		}

	}

	valuesIds := o.Ids

	joinedIds := swag.JoinByFormat(valuesIds, "")
	// path array param ids
	// SetPathParam does not support variadric arguments, since we used JoinByFormat
	// we can send the first item in the array as it's all the items of the previous
	// array joined together
	if len(joinedIds) > 0 {
		if err := r.SetPathParam("ids", joinedIds[0]); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// Code generated by go-swagger; DO NOT EDIT.

package road

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewRoadDisruptionParams creates a new RoadDisruptionParams object
// with the default values initialized.
func NewRoadDisruptionParams() *RoadDisruptionParams {
	var ()
	return &RoadDisruptionParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewRoadDisruptionParamsWithTimeout creates a new RoadDisruptionParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewRoadDisruptionParamsWithTimeout(timeout time.Duration) *RoadDisruptionParams {
	var ()
	return &RoadDisruptionParams{

		timeout: timeout,
	}
}

// NewRoadDisruptionParamsWithContext creates a new RoadDisruptionParams object
// with the default values initialized, and the ability to set a context for a request
func NewRoadDisruptionParamsWithContext(ctx context.Context) *RoadDisruptionParams {
	var ()
	return &RoadDisruptionParams{

		Context: ctx,
	}
}

// NewRoadDisruptionParamsWithHTTPClient creates a new RoadDisruptionParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewRoadDisruptionParamsWithHTTPClient(client *http.Client) *RoadDisruptionParams {
	var ()
	return &RoadDisruptionParams{
		HTTPClient: client,
	}
}

/*RoadDisruptionParams contains all the parameters to send to the API endpoint
for the road disruption operation typically these are written to a http.Request
*/
type RoadDisruptionParams struct {

	/*Categories
	  an optional list of category names to filter on (a valid list of categories can be obtained from the /Road/Meta/categories endpoint)

	*/
	Categories []string
	/*Closures
	  Optional, defaults to true. When true, always includes disruptions that have road closures, regardless of the severity filter. When false, the severity filter works as normal.

	*/
	Closures *bool
	/*Ids
	  Comma-separated list of road identifiers e.g. "A406, A2" use all for all to ignore id filter (a full list of supported road identifiers can be found at the /Road/ endpoint)

	*/
	Ids []string
	/*Severities
	  an optional list of Severity names to filter on (a valid list of severities can be obtained from the /Road/Meta/severities endpoint)

	*/
	Severities []string
	/*StripContent
	  Optional, defaults to false. When true, removes every property/node except for id, point, severity, severityDescription, startDate, endDate, corridor details, location, comments and streets

	*/
	StripContent *bool

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the road disruption params
func (o *RoadDisruptionParams) WithTimeout(timeout time.Duration) *RoadDisruptionParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the road disruption params
func (o *RoadDisruptionParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the road disruption params
func (o *RoadDisruptionParams) WithContext(ctx context.Context) *RoadDisruptionParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the road disruption params
func (o *RoadDisruptionParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the road disruption params
func (o *RoadDisruptionParams) WithHTTPClient(client *http.Client) *RoadDisruptionParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the road disruption params
func (o *RoadDisruptionParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithCategories adds the categories to the road disruption params
func (o *RoadDisruptionParams) WithCategories(categories []string) *RoadDisruptionParams {
	o.SetCategories(categories)
	return o
}

// SetCategories adds the categories to the road disruption params
func (o *RoadDisruptionParams) SetCategories(categories []string) {
	o.Categories = categories
}

// WithClosures adds the closures to the road disruption params
func (o *RoadDisruptionParams) WithClosures(closures *bool) *RoadDisruptionParams {
	o.SetClosures(closures)
	return o
}

// SetClosures adds the closures to the road disruption params
func (o *RoadDisruptionParams) SetClosures(closures *bool) {
	o.Closures = closures
}

// WithIds adds the ids to the road disruption params
func (o *RoadDisruptionParams) WithIds(ids []string) *RoadDisruptionParams {
	o.SetIds(ids)
	return o
}

// SetIds adds the ids to the road disruption params
func (o *RoadDisruptionParams) SetIds(ids []string) {
	o.Ids = ids
}

// WithSeverities adds the severities to the road disruption params
func (o *RoadDisruptionParams) WithSeverities(severities []string) *RoadDisruptionParams {
	o.SetSeverities(severities)
	return o
}

// SetSeverities adds the severities to the road disruption params
func (o *RoadDisruptionParams) SetSeverities(severities []string) {
	o.Severities = severities
}

// WithStripContent adds the stripContent to the road disruption params
func (o *RoadDisruptionParams) WithStripContent(stripContent *bool) *RoadDisruptionParams {
	o.SetStripContent(stripContent)
	return o
}

// SetStripContent adds the stripContent to the road disruption params
func (o *RoadDisruptionParams) SetStripContent(stripContent *bool) {
	o.StripContent = stripContent
}

// WriteToRequest writes these params to a swagger request
func (o *RoadDisruptionParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	valuesCategories := o.Categories

	joinedCategories := swag.JoinByFormat(valuesCategories, "multi")
	// query array param categories
	if err := r.SetQueryParam("categories", joinedCategories...); err != nil {
		return err
	}

	if o.Closures != nil {

		// query param closures
		var qrClosures bool
		if o.Closures != nil {
			qrClosures = *o.Closures
		}
		qClosures := swag.FormatBool(qrClosures)
		if qClosures != "" {
			if err := r.SetQueryParam("closures", qClosures); err != nil {
				return err
			}
		}

	}

	valuesIds := o.Ids

	joinedIds := swag.JoinByFormat(valuesIds, "")
	// path array param ids
	// SetPathParam does not support variadric arguments, since we used JoinByFormat
	// we can send the first item in the array as it's all the items of the previous
	// array joined together
	if len(joinedIds) > 0 {
		if err := r.SetPathParam("ids", joinedIds[0]); err != nil {
			return err
		}
	}

	valuesSeverities := o.Severities

	joinedSeverities := swag.JoinByFormat(valuesSeverities, "multi")
	// query array param severities
	if err := r.SetQueryParam("severities", joinedSeverities...); err != nil {
		return err
	}

	if o.StripContent != nil {

		// query param stripContent
		var qrStripContent bool
		if o.StripContent != nil {
			qrStripContent = *o.StripContent
		}
		qStripContent := swag.FormatBool(qrStripContent)
		if qStripContent != "" {
			if err := r.SetQueryParam("stripContent", qStripContent); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
